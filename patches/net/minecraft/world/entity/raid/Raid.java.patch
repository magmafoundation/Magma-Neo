--- a/net/minecraft/world/entity/raid/Raid.java
+++ b/net/minecraft/world/entity/raid/Raid.java
@@ -162,6 +_,12 @@
         return this.status == Raid.RaidStatus.LOSS;
     }
 
+    // CraftBukkit start
+    public boolean isInProgress() {
+        return this.status == RaidStatus.ONGOING;
+    }
+    // CraftBukkit end
+
     public float getTotalHealth() {
         return this.totalHealth;
     }
@@ -252,6 +_,7 @@
                 boolean flag = this.active;
                 this.active = this.level.hasChunkAt(this.center);
                 if (this.level.getDifficulty() == Difficulty.PEACEFUL) {
+                    org.bukkit.craftbukkit.event.CraftEventFactory.callRaidStopEvent(this, org.bukkit.event.raid.RaidStopEvent.Reason.PEACE); // CraftBukkit
                     this.stop();
                     return;
                 }
@@ -271,13 +_,16 @@
                 if (!this.level.isVillage(this.center)) {
                     if (this.groupsSpawned > 0) {
                         this.status = Raid.RaidStatus.LOSS;
+                        org.bukkit.craftbukkit.event.CraftEventFactory.callRaidFinishEvent(this, new java.util.ArrayList<>()); // CraftBukkit
                     } else {
+                        org.bukkit.craftbukkit.event.CraftEventFactory.callRaidStopEvent(this, org.bukkit.event.raid.RaidStopEvent.Reason.NOT_IN_VILLAGE); // CraftBukkit
                         this.stop();
                     }
                 }
 
                 this.ticksActive++;
                 if (this.ticksActive >= 48000L) {
+                    org.bukkit.craftbukkit.event.CraftEventFactory.callRaidStopEvent(this, org.bukkit.event.raid.RaidStopEvent.Reason.TIMEOUT); // CraftBukkit
                     this.stop();
                     return;
                 }
@@ -349,6 +_,7 @@
                     }
 
                     if (k > 3) {
+                        org.bukkit.craftbukkit.event.CraftEventFactory.callRaidStopEvent(this, org.bukkit.event.raid.RaidStopEvent.Reason.UNSPAWNABLE);  // CraftBukkit
                         this.stop();
                         break;
                     }
@@ -360,6 +_,7 @@
                     } else {
                         this.status = Raid.RaidStatus.VICTORY;
 
+                        List<org.bukkit.entity.Player> winners = new java.util.ArrayList<>(); // CraftBukkit
                         for (UUID uuid : this.heroesOfTheVillage) {
                             Entity entity = this.level.getEntity(uuid);
                             if (entity instanceof LivingEntity) {
@@ -371,10 +_,12 @@
                                     if (livingentity instanceof ServerPlayer serverplayer) {
                                         serverplayer.awardStat(Stats.RAID_WIN);
                                         CriteriaTriggers.RAID_WIN.trigger(serverplayer);
+                                        winners.add(serverplayer.getBukkitEntity()); // CraftBukkit
                                     }
                                 }
                             }
                         }
+                        org.bukkit.craftbukkit.event.CraftEventFactory.callRaidFinishEvent(this, winners); // CraftBukkit
                     }
                 }
 
@@ -382,6 +_,7 @@
             } else if (this.isOver()) {
                 this.celebrationTicks++;
                 if (this.celebrationTicks >= 600) {
+                    org.bukkit.craftbukkit.event.CraftEventFactory.callRaidStopEvent(this, org.bukkit.event.raid.RaidStopEvent.Reason.FINISHED); // CraftBukkit
                     this.stop();
                     return;
                 }
@@ -497,13 +_,17 @@
         DifficultyInstance difficultyinstance = this.level.getCurrentDifficultyAt(p_37756_);
         boolean flag1 = this.shouldSpawnBonusGroup();
 
+        // CraftBukkit start
+        Raider leader = null;
+        List<Raider> raiders = new java.util.ArrayList<>();
+        // CraftBukkit end
         for (Raid.RaiderType raid$raidertype : Raid.RaiderType.VALUES) {
             int j = this.getDefaultNumSpawns(raid$raidertype, i, flag1)
                 + this.getPotentialBonusSpawns(raid$raidertype, this.random, i, difficultyinstance, flag1);
             int k = 0;
 
             for (int l = 0; l < j; l++) {
-                Raider raider = raid$raidertype.entityType.create(this.level);
+                Raider raider = raid$raidertype.entityTypeSupplier.get().create(this.level);
                 if (raider == null) {
                     break;
                 }
@@ -512,10 +_,12 @@
                     raider.setPatrolLeader(true);
                     this.setLeader(i, raider);
                     flag = true;
+                    leader = raider; // CraftBukkit
                 }
 
                 this.joinRaid(i, raider, p_37756_, false);
-                if (raid$raidertype.entityType == EntityType.RAVAGER) {
+                raiders.add(raider); // CraftBukkit
+                if (raid$raidertype.entityTypeSupplier.get() == EntityType.RAVAGER) {
                     Raider raider1 = null;
                     if (i == this.getNumGroups(Difficulty.NORMAL)) {
                         raider1 = EntityType.PILLAGER.create(this.level);
@@ -532,6 +_,7 @@
                         this.joinRaid(i, raider1, p_37756_, false);
                         raider1.moveTo(p_37756_, 0.0F, 0.0F);
                         raider1.startRiding(raider);
+                        raiders.add(raider); // CraftBukkit
                     }
                 }
             }
@@ -541,6 +_,7 @@
         this.groupsSpawned++;
         this.updateBossbar();
         this.setDirty();
+        org.bukkit.craftbukkit.event.CraftEventFactory.callRaidSpawnWaveEvent(this, leader, raiders); // CraftBukkit
     }
 
     public void joinRaid(int p_37714_, Raider p_37715_, @Nullable BlockPos p_37716_, boolean p_37717_) {
@@ -555,7 +_,7 @@
                 p_37715_.finalizeSpawn(this.level, this.level.getCurrentDifficultyAt(p_37716_), MobSpawnType.EVENT, null);
                 p_37715_.applyRaidBuffs(this.level, p_37714_, false);
                 p_37715_.setOnGround(true);
-                this.level.addFreshEntityWithPassengers(p_37715_);
+                this.level.addFreshEntityWithPassengers(p_37715_, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.RAID); // CraftBukkit
             }
         }
     }
@@ -811,6 +_,12 @@
         this.heroesOfTheVillage.add(p_37727_.getUUID());
     }
 
+    // CraftBukkit start - a method to get all raiders
+    public java.util.Collection<Raider> getRaiders() {
+        return this.groupRaiderMap.values().stream().flatMap(Set::stream).collect(java.util.stream.Collectors.toSet());
+    }
+    // CraftBukkit end
+
     static enum RaidStatus {
         ONGOING,
         VICTORY,
@@ -834,7 +_,7 @@
         }
     }
 
-    public static enum RaiderType {
+    public static enum RaiderType implements net.neoforged.fml.common.asm.enumextension.IExtensibleEnum {
         VINDICATOR(EntityType.VINDICATOR, new int[]{0, 0, 2, 0, 1, 4, 2, 5}),
         EVOKER(EntityType.EVOKER, new int[]{0, 0, 0, 0, 0, 1, 1, 2}),
         PILLAGER(EntityType.PILLAGER, new int[]{0, 4, 3, 3, 4, 4, 4, 2}),
@@ -842,12 +_,26 @@
         RAVAGER(EntityType.RAVAGER, new int[]{0, 0, 0, 1, 0, 1, 0, 2});
 
         static final Raid.RaiderType[] VALUES = values();
+        @Deprecated // Neo: null for custom types, use the supplier instead
         final EntityType<? extends Raider> entityType;
         final int[] spawnsPerWaveBeforeBonus;
+        final java.util.function.Supplier<EntityType<? extends Raider>> entityTypeSupplier;
 
+        @net.neoforged.fml.common.asm.enumextension.ReservedConstructor
         private RaiderType(EntityType<? extends Raider> p_37821_, int[] p_37822_) {
             this.entityType = p_37821_;
             this.spawnsPerWaveBeforeBonus = p_37822_;
+            this.entityTypeSupplier = () -> p_37821_;
+        }
+
+        private RaiderType(java.util.function.Supplier<EntityType<? extends Raider>> entityTypeSupplier, int[] spawnsPerWave) {
+            this.entityType = null;
+            this.spawnsPerWaveBeforeBonus = spawnsPerWave;
+            this.entityTypeSupplier = entityTypeSupplier;
+        }
+
+        public static net.neoforged.fml.common.asm.enumextension.ExtensionInfo getExtensionInfo() {
+            return net.neoforged.fml.common.asm.enumextension.ExtensionInfo.nonExtended(Raid.RaiderType.class);
         }
     }
 }
