--- a/net/minecraft/world/entity/vehicle/Boat.java
+++ b/net/minecraft/world/entity/vehicle/Boat.java
@@ -52,7 +_,7 @@
 import net.minecraft.world.phys.shapes.Shapes;
 import net.minecraft.world.phys.shapes.VoxelShape;
 
-public class Boat extends VehicleEntity implements Leashable, VariantHolder<Boat.Type> {
+public class Boat extends VehicleEntity implements Leashable, VariantHolder<Boat.Type>, net.neoforged.neoforge.common.extensions.IBoatExtension {
     private static final EntityDataAccessor<Integer> DATA_ID_TYPE = SynchedEntityData.defineId(Boat.class, EntityDataSerializers.INT);
     private static final EntityDataAccessor<Boolean> DATA_ID_PADDLE_LEFT = SynchedEntityData.defineId(Boat.class, EntityDataSerializers.BOOLEAN);
     private static final EntityDataAccessor<Boolean> DATA_ID_PADDLE_RIGHT = SynchedEntityData.defineId(Boat.class, EntityDataSerializers.BOOLEAN);
@@ -90,6 +_,14 @@
     @Nullable
     private Leashable.LeashData leashData;
 
+    // CraftBukkit start
+    // PAIL: Some of these haven't worked since a few updates, and since 1.9 they are less and less applicable.
+    public double maxSpeed = 0.4D;
+    public double occupiedDeceleration = 0.2D;
+    public double unoccupiedDeceleration = -1;
+    public boolean landBoats = false;
+    // CraftBukkit end
+
     public Boat(EntityType<? extends Boat> p_38290_, Level p_38291_) {
         super(p_38290_, p_38291_);
         this.blocksBuilding = true;
@@ -157,7 +_,7 @@
             }
         }
 
-        return new Vec3(0.0, this.getVariant() == Boat.Type.BAMBOO ? (double)(p_295933_.height() * 0.8888889F) : (double)(p_295933_.height() / 3.0F), (double)f)
+        return new Vec3(0.0, this.getVariant().isRaft() ? (double)(p_295933_.height() * 0.8888889F) : (double)(p_295933_.height() / 3.0F), (double)f)
             .yRot(-this.getYRot() * (float) (Math.PI / 180.0));
     }
 
@@ -194,9 +_,29 @@
     public void push(Entity p_38373_) {
         if (p_38373_ instanceof Boat) {
             if (p_38373_.getBoundingBox().minY < this.getBoundingBox().maxY) {
+                // CraftBukkit start
+                if (!this.isPassengerOfSameVehicle(p_38373_)) {
+                    org.bukkit.event.vehicle.VehicleEntityCollisionEvent event = new org.bukkit.event.vehicle.VehicleEntityCollisionEvent((org.bukkit.entity.Vehicle) this.getBukkitEntity(), p_38373_.getBukkitEntity());
+                    this.level().getCraftServer().getPluginManager().callEvent(event);
+
+                    if (event.isCancelled()) {
+                        return;
+                    }
+                }
+                // CraftBukkit end
                 super.push(p_38373_);
             }
         } else if (p_38373_.getBoundingBox().minY <= this.getBoundingBox().minY) {
+            // CraftBukkit start
+            if (!this.isPassengerOfSameVehicle(p_38373_)) {
+                org.bukkit.event.vehicle.VehicleEntityCollisionEvent event = new org.bukkit.event.vehicle.VehicleEntityCollisionEvent((org.bukkit.entity.Vehicle) this.getBukkitEntity(), p_38373_.getBukkitEntity());
+                this.level().getCraftServer().getPluginManager().callEvent(event);
+
+                if (event.isCancelled()) {
+                    return;
+                }
+            }
+            // CraftBukkit end
             super.push(p_38373_);
         }
     }
@@ -212,7 +_,8 @@
             case DARK_OAK -> Items.DARK_OAK_BOAT;
             case MANGROVE -> Items.MANGROVE_BOAT;
             case BAMBOO -> Items.BAMBOO_RAFT;
-            default -> Items.OAK_BOAT;
+            case OAK -> Items.OAK_BOAT;
+            default -> this.getVariant().boatItem.get();
         };
     }
 
@@ -268,6 +_,7 @@
         return this.getDirection().getClockWise();
     }
 
+    private org.bukkit.Location lastLocation; // CraftBukkit
     @Override
     public void tick() {
         this.oldStatus = this.status;
@@ -308,6 +_,21 @@
             this.setDeltaMovement(Vec3.ZERO);
         }
 
+        // CraftBukkit start
+        org.bukkit.Server server = this.level().getCraftServer();
+        org.bukkit.World bworld = this.level().getWorld();
+
+        org.bukkit.Location to = org.bukkit.craftbukkit.util.CraftLocation.toBukkit(this.position(), bworld, this.getYRot(), this.getXRot());
+        org.bukkit.entity.Vehicle vehicle = (org.bukkit.entity.Vehicle) this.getBukkitEntity();
+
+        server.getPluginManager().callEvent(new org.bukkit.event.vehicle.VehicleUpdateEvent(vehicle));
+        if (lastLocation != null && !lastLocation.equals(to)) {
+            org.bukkit.event.vehicle.VehicleMoveEvent event = new org.bukkit.event.vehicle.VehicleMoveEvent(vehicle, lastLocation, to);
+            server.getPluginManager().callEvent(event);
+        }
+        lastLocation = vehicle.getLocation();
+        // CraftBukkit end
+
         this.tickBubbleColumn();
 
         for (int i = 0; i <= 1; i++) {
@@ -498,7 +_,7 @@
                 for (int i2 = i1; i2 < j1; i2++) {
                     blockpos$mutableblockpos.set(l1, k1, i2);
                     FluidState fluidstate = this.level().getFluidState(blockpos$mutableblockpos);
-                    if (fluidstate.is(FluidTags.WATER)) {
+                    if (this.canBoatInFluid(fluidstate)) {
                         f = Math.max(f, fluidstate.getHeight(this.level(), blockpos$mutableblockpos));
                     }
 
@@ -544,7 +_,7 @@
                                     voxelshape,
                                     BooleanOp.AND
                                 )) {
-                                f += blockstate.getBlock().getFriction();
+                                f += blockstate.getFriction(this.level(), blockpos$mutableblockpos, this);
                                 k1++;
                             }
                         }
@@ -573,7 +_,7 @@
                 for (int i2 = i1; i2 < j1; i2++) {
                     blockpos$mutableblockpos.set(k1, l1, i2);
                     FluidState fluidstate = this.level().getFluidState(blockpos$mutableblockpos);
-                    if (fluidstate.is(FluidTags.WATER)) {
+                    if (this.canBoatInFluid(fluidstate)) {
                         float f = (float)l1 + fluidstate.getHeight(this.level(), blockpos$mutableblockpos);
                         this.waterLevel = Math.max((double)f, this.waterLevel);
                         flag |= aabb.minY < (double)f;
@@ -603,7 +_,7 @@
                 for (int i2 = i1; i2 < j1; i2++) {
                     blockpos$mutableblockpos.set(k1, l1, i2);
                     FluidState fluidstate = this.level().getFluidState(blockpos$mutableblockpos);
-                    if (fluidstate.is(FluidTags.WATER)
+                    if (this.canBoatInFluid(fluidstate)
                         && d0 < (double)((float)blockpos$mutableblockpos.getY() + fluidstate.getHeight(this.level(), blockpos$mutableblockpos))) {
                         if (!fluidstate.isSource()) {
                             return Boat.Status.UNDER_FLOWING_WATER;
@@ -805,6 +_,13 @@
 
     @Override
     public void remove(Entity.RemovalReason p_352927_) {
+        // CraftBukkit start - add Bukkit remove cause
+        this.remove(p_352927_, null);
+    }
+
+    @Override
+    public void remove(Entity.RemovalReason p_352927_, org.bukkit.event.entity.EntityRemoveEvent.Cause cause) {
+        // CraftBukkit end
         if (!this.level().isClientSide && p_352927_.shouldDestroy() && this.isLeashed()) {
             this.dropLeash(true, true);
         }
@@ -825,6 +_,11 @@
 
                     this.causeFallDamage(this.fallDistance, 1.0F, this.damageSources().fall());
                     if (!this.level().isClientSide && !this.isRemoved()) {
+                        // CraftBukkit start
+                        org.bukkit.entity.Vehicle vehicle = (org.bukkit.entity.Vehicle) this.getBukkitEntity();
+                        org.bukkit.event.vehicle.VehicleDestroyEvent destroyEvent = new org.bukkit.event.vehicle.VehicleDestroyEvent(vehicle, null);
+                        this.level().getCraftServer().getPluginManager().callEvent(destroyEvent);
+                        if (!destroyEvent.isCancelled()) {
                         this.kill();
                         if (this.level().getGameRules().getBoolean(GameRules.RULE_DOENTITYDROPS)) {
                             for (int i = 0; i < 3; i++) {
@@ -832,14 +_,16 @@
                             }
 
                             for (int j = 0; j < 2; j++) {
-                                this.spawnAtLocation(Items.STICK);
+                                // Neo: allow dropping material-specific sticks instead of just generic wooden sticks
+                                this.spawnAtLocation(this.getVariant().getSticks());
                             }
                         }
                     }
+                    } // CraftBukkit end
                 }
 
                 this.resetFallDistance();
-            } else if (!this.level().getFluidState(this.blockPosition().below()).is(FluidTags.WATER) && p_38307_ < 0.0) {
+            } else if (!this.canBoatInFluid(this.level().getFluidState(this.blockPosition().below())) && p_38307_ < 0.0D) {
                 this.fallDistance -= (float)p_38307_;
             }
         }
@@ -871,7 +_,7 @@
 
     @Override
     protected boolean canAddPassenger(Entity p_38390_) {
-        return this.getPassengers().size() < this.getMaxPassengers() && !this.isEyeInFluid(FluidTags.WATER);
+        return this.getPassengers().size() < this.getMaxPassengers() && !this.canBoatInFluid(this.getEyeInFluidType());
     }
 
     protected int getMaxPassengers() {
@@ -914,7 +_,9 @@
         IN_AIR;
     }
 
-    public static enum Type implements StringRepresentable {
+    @net.neoforged.fml.common.asm.enumextension.NamedEnum(1)
+    @net.neoforged.fml.common.asm.enumextension.NetworkedEnum(net.neoforged.fml.common.asm.enumextension.NetworkedEnum.NetworkCheck.CLIENTBOUND)
+    public static enum Type implements StringRepresentable, net.neoforged.fml.common.asm.enumextension.IExtensibleEnum {
         OAK(Blocks.OAK_PLANKS, "oak"),
         SPRUCE(Blocks.SPRUCE_PLANKS, "spruce"),
         BIRCH(Blocks.BIRCH_PLANKS, "birch"),
@@ -923,16 +_,59 @@
         CHERRY(Blocks.CHERRY_PLANKS, "cherry"),
         DARK_OAK(Blocks.DARK_OAK_PLANKS, "dark_oak"),
         MANGROVE(Blocks.MANGROVE_PLANKS, "mangrove"),
-        BAMBOO(Blocks.BAMBOO_PLANKS, "bamboo");
+        BAMBOO(Blocks.BAMBOO_PLANKS, "bamboo", true);
 
         private final String name;
+        /** @deprecated Neo: Will be {@link Blocks#AIR} for modded boat types, use {@link #planksSupplier} instead */
+        @Deprecated
         private final Block planks;
+        private final java.util.function.Supplier<Block> planksSupplier;
+        final java.util.function.Supplier<Item> boatItem;
+        final java.util.function.Supplier<Item> chestBoatItem;
+        private final java.util.function.Supplier<Item> stickItem;
+        private final boolean raft;
         public static final StringRepresentable.EnumCodec<Boat.Type> CODEC = StringRepresentable.fromEnum(Boat.Type::values);
         private static final IntFunction<Boat.Type> BY_ID = ByIdMap.continuous(Enum::ordinal, values(), ByIdMap.OutOfBoundsStrategy.ZERO);
 
+        @net.neoforged.fml.common.asm.enumextension.ReservedConstructor
         private Type(Block p_38427_, String p_38428_) {
+            this(p_38427_, p_38428_, false);
+        }
+
+        @net.neoforged.fml.common.asm.enumextension.ReservedConstructor
+        private Type(Block p_38427_, String p_38428_, boolean raft) {
             this.name = p_38428_;
             this.planks = p_38427_;
+            this.planksSupplier = () -> p_38427_;
+            this.boatItem = () -> Items.AIR;
+            this.chestBoatItem = () -> Items.AIR;
+            this.stickItem = () -> Items.STICK;
+            this.raft = raft;
+        }
+
+        /**
+         * @param planks A supplier of the block to be dropped when the boat is destroyed by fall damage
+         * @param name The name of this boat type
+         * @param boatItem A supplier of the item to be dropped when a normal boat or raft of this type is picked up
+         * @param chestBoatItem A supplier of the item to be dropped when a chest boat or raft of this type is picked up
+         * @param stickItem A supplier of the stick item to be dropped when the boat is destroyed by fall damage
+         * @param raft Whether this boat type is a "standard" boat or a raft
+         */
+        private Type(
+                java.util.function.Supplier<Block> planks,
+                String name,
+                java.util.function.Supplier<Item> boatItem,
+                java.util.function.Supplier<Item> chestBoatItem,
+                java.util.function.Supplier<Item> stickItem,
+                boolean raft
+        ) {
+            this.name = name;
+            this.planks = Blocks.AIR;
+            this.planksSupplier = planks;
+            this.boatItem = boatItem;
+            this.chestBoatItem = chestBoatItem;
+            this.stickItem = stickItem;
+            this.raft = raft;
         }
 
         @Override
@@ -945,7 +_,15 @@
         }
 
         public Block getPlanks() {
-            return this.planks;
+            return this.planksSupplier.get();
+        }
+
+        public Item getSticks() {
+            return this.stickItem.get();
+        }
+
+        public boolean isRaft() {
+            return this.raft;
         }
 
         @Override
@@ -959,6 +_,10 @@
 
         public static Boat.Type byName(String p_38433_) {
             return CODEC.byName(p_38433_, OAK);
+        }
+
+        public static net.neoforged.fml.common.asm.enumextension.ExtensionInfo getExtensionInfo() {
+            return net.neoforged.fml.common.asm.enumextension.ExtensionInfo.nonExtended(Boat.Type.class);
         }
     }
 }
