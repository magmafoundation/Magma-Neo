--- a/net/minecraft/world/entity/monster/piglin/Piglin.java
+++ b/net/minecraft/world/entity/monster/piglin/Piglin.java
@@ -116,6 +_,10 @@
         MemoryModuleType.ATE_RECENTLY,
         MemoryModuleType.NEAREST_REPELLENT
     );
+    // CraftBukkit start - Custom bartering and interest list
+    public java.util.Set<net.minecraft.world.item.Item> allowedBarterItems = new java.util.HashSet<>();
+    public java.util.Set<net.minecraft.world.item.Item> interestItems = new java.util.HashSet<>();
+    // CraftBukkit end
 
     public Piglin(EntityType<? extends AbstractPiglin> p_34683_, Level p_34684_) {
         super(p_34683_, p_34684_);
@@ -349,7 +_,7 @@
         } else if (this.isChargingCrossbow()) {
             return PiglinArmPose.CROSSBOW_CHARGE;
         } else {
-            return this.isAggressive() && this.isHolding(Items.CROSSBOW) ? PiglinArmPose.CROSSBOW_HOLD : PiglinArmPose.DEFAULT;
+            return this.isAggressive() && this.isHolding(is -> is.getItem() instanceof net.minecraft.world.item.CrossbowItem) ? PiglinArmPose.CROSSBOW_HOLD : PiglinArmPose.DEFAULT;
         }
     }
 
@@ -390,7 +_,7 @@
     }
 
     protected void holdInOffHand(ItemStack p_34786_) {
-        if (p_34786_.is(PiglinAi.BARTERING_ITEM)) {
+        if (p_34786_.isPiglinCurrency()) {
             this.setItemSlot(EquipmentSlot.OFFHAND, p_34786_);
             this.setGuaranteedDrop(EquipmentSlot.OFFHAND);
         } else {
@@ -400,7 +_,7 @@
 
     @Override
     public boolean wantsToPickUp(ItemStack p_34777_) {
-        return this.level().getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING) && this.canPickUpLoot() && PiglinAi.wantsToPickup(this, p_34777_);
+        return net.neoforged.neoforge.event.EventHooks.canEntityGrief(this.level(), this) && this.canPickUpLoot() && PiglinAi.wantsToPickup(this, p_34777_);
     }
 
     protected boolean canReplaceCurrentItem(ItemStack p_34788_) {
