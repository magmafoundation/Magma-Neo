--- a/net/minecraft/world/entity/EntityType.java
+++ b/net/minecraft/world/entity/EntityType.java
@@ -190,7 +_,7 @@
             .fireImmune()
             .sized(6.0F, 0.5F)
             .clientTrackingRange(10)
-            .updateInterval(Integer.MAX_VALUE)
+            .updateInterval(10) // CraftBukkit - SPIGOT-3729: track area effect clouds
     );
     public static final EntityType<Armadillo> ARMADILLO = register(
         "armadillo", EntityType.Builder.of(Armadillo::new, MobCategory.CREATURE).sized(0.7F, 0.65F).eyeHeight(0.26F).clientTrackingRange(10)
@@ -834,6 +_,10 @@
     private final float spawnDimensionsScale;
     private final FeatureFlagSet requiredFeatures;
 
+    private final java.util.function.Predicate<EntityType<?>> trackDeltasSupplier;
+    private final java.util.function.ToIntFunction<EntityType<?>> trackingRangeSupplier;
+    private final java.util.function.ToIntFunction<EntityType<?>> updateIntervalSupplier;
+
     private static <T extends Entity> EntityType<T> register(String p_20635_, EntityType.Builder<T> p_20636_) {
         return Registry.register(BuiltInRegistries.ENTITY_TYPE, p_20635_, p_20636_.build(p_20635_));
     }
@@ -860,6 +_,26 @@
         int p_273451_,
         FeatureFlagSet p_273518_
     ) {
+        this(p_273268_, p_272918_, p_273417_, p_273389_, p_273556_, p_272654_, p_273631_, p_272946_, p_338404_, p_272895_, p_273451_, p_273518_, EntityType::defaultTrackDeltasSupplier, EntityType::defaultTrackingRangeSupplier, EntityType::defaultUpdateIntervalSupplier);
+    }
+
+    public EntityType(
+        EntityType.EntityFactory<T> p_273268_,
+        MobCategory p_272918_,
+        boolean p_273417_,
+        boolean p_273389_,
+        boolean p_273556_,
+        boolean p_272654_,
+        ImmutableSet<Block> p_273631_,
+        EntityDimensions p_272946_,
+        float p_338404_,
+        int p_272895_,
+        int p_273451_,
+        FeatureFlagSet p_273518_,
+        final java.util.function.Predicate<EntityType<?>> trackDeltasSupplier,
+        final java.util.function.ToIntFunction<EntityType<?>> trackingRangeSupplier,
+        final java.util.function.ToIntFunction<EntityType<?>> updateIntervalSupplier
+    ) {
         this.factory = p_273268_;
         this.category = p_272918_;
         this.canSpawnFarFromPlayer = p_272654_;
@@ -872,6 +_,9 @@
         this.clientTrackingRange = p_272895_;
         this.updateInterval = p_273451_;
         this.requiredFeatures = p_273518_;
+        this.trackDeltasSupplier = trackDeltasSupplier;
+        this.trackingRangeSupplier = trackingRangeSupplier;
+        this.updateIntervalSupplier = updateIntervalSupplier;
     }
 
     @Nullable
@@ -884,6 +_,21 @@
         boolean p_20598_,
         boolean p_20599_
     ) {
+        // CraftBukkit start
+        return this.spawn(p_20593_, p_20594_, p_20595_, p_20596_, p_20597_, p_20598_, p_20599_, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.SPAWNER_EGG);
+    }
+
+    @Nullable
+    public T spawn(
+            ServerLevel p_20593_,
+            @Nullable ItemStack p_20594_,
+            @Nullable Player p_20595_,
+            BlockPos p_20596_,
+            MobSpawnType p_20597_,
+            boolean p_20598_,
+            boolean p_20599_,
+            org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason spawnReason
+    ) {
         Consumer<T> consumer;
         if (p_20594_ != null) {
             consumer = createDefaultStackConfig(p_20593_, p_20594_, p_20595_);
@@ -892,7 +_,7 @@
             };
         }
 
-        return this.spawn(p_20593_, consumer, p_20596_, p_20597_, p_20598_, p_20599_);
+        return this.spawn(p_20593_, consumer, p_20596_, p_20597_, p_20598_, p_20599_, spawnReason); // CraftBukkit
     }
 
     public static <T extends Entity> Consumer<T> createDefaultStackConfig(ServerLevel p_263583_, ItemStack p_263568_, @Nullable Player p_263575_) {
@@ -915,19 +_,37 @@
         Consumer<T> p_263579_, ServerLevel p_263571_, ItemStack p_263582_, @Nullable Player p_263574_
     ) {
         CustomData customdata = p_263582_.getOrDefault(DataComponents.ENTITY_DATA, CustomData.EMPTY);
-        return !customdata.isEmpty() ? p_263579_.andThen(p_329995_ -> updateCustomEntityTag(p_263571_, p_263574_, p_329995_, customdata)) : p_263579_;
+        return !customdata.isEmpty() ? p_263579_.andThen(p_329995_ -> {
+            try { updateCustomEntityTag(p_263571_, p_263574_, p_329995_, customdata); } catch (Throwable t) { LOGGER.warn("Error loading spawn egg NBT", t); } // CraftBukkit - SPIGOT-5665
+        }) : p_263579_;
     }
 
     @Nullable
     public T spawn(ServerLevel p_262634_, BlockPos p_262707_, MobSpawnType p_262597_) {
-        return this.spawn(p_262634_, null, p_262707_, p_262597_, false, false);
+        // CraftBukkit start
+        return this.spawn(p_262634_, p_262707_, p_262597_, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.DEFAULT);
+    }
+
+    @Nullable
+    public T spawn(ServerLevel worldserver, BlockPos blockposition, MobSpawnType enummobspawn, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason spawnReason) {
+        return this.spawn(worldserver, (Consumer<T>) null, blockposition, enummobspawn, false, false, spawnReason); // CraftBukkit - decompile error
+        // CraftBukkit end
     }
 
     @Nullable
     public T spawn(ServerLevel p_262704_, @Nullable Consumer<T> p_262621_, BlockPos p_262672_, MobSpawnType p_262644_, boolean p_262690_, boolean p_262590_) {
+        // CraftBukkit start
+        return this.spawn(p_262704_, p_262621_, p_262672_, p_262644_, p_262690_, p_262590_, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.DEFAULT);
+    }
+
+    @Nullable
+    public T spawn(ServerLevel p_262704_, @Nullable Consumer<T> p_262621_, BlockPos p_262672_, MobSpawnType p_262644_, boolean p_262690_, boolean p_262590_, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason spawnReason) {
+        // CraftBukkit end
         T t = this.create(p_262704_, p_262621_, p_262672_, p_262644_, p_262690_, p_262590_);
         if (t != null) {
-            p_262704_.addFreshEntityWithPassengers(t);
+            p_262704_.addFreshEntityWithPassengers(t, spawnReason);
+            return !t.isRemoved() ? t : null; // Don't return an entity when CreatureSpawnEvent is canceled
+            // CraftBukkit end
         }
 
         return t;
@@ -958,6 +_,15 @@
                 mob.yHeadRot = mob.getYRot();
                 mob.yBodyRot = mob.getYRot();
                 mob.finalizeSpawn(p_262637_, p_262637_.getCurrentDifficultyAt(mob.blockPosition()), p_262666_, null);
+
+                if (mob.isSpawnCancelled()) {
+                    // Neo: Discard mob, spawn was cancelled
+                    mob.discard();
+                    // return null, mob was killed, context should be lost
+                    // fixes llamas for wandering trader spawning if wandering trader was cancelled
+                    return null;
+                }
+
                 mob.playAmbientSound();
             }
 
@@ -1149,14 +_,23 @@
     }
 
     public int clientTrackingRange() {
+        return trackingRangeSupplier.applyAsInt(this);
+    }
+    private int defaultTrackingRangeSupplier() {
         return this.clientTrackingRange;
     }
 
     public int updateInterval() {
+        return updateIntervalSupplier.applyAsInt(this);
+    }
+    private int defaultUpdateIntervalSupplier() {
         return this.updateInterval;
     }
 
     public boolean trackDeltas() {
+        return this.trackDeltasSupplier.test(this);
+    }
+    private boolean defaultTrackDeltasSupplier() {
         return this != PLAYER
             && this != LLAMA_SPIT
             && this != WITHER
@@ -1192,6 +_,8 @@
         return this.builtInRegistryHolder;
     }
 
+    public Stream<TagKey<EntityType<?>>> getTags() {return this.builtInRegistryHolder().tags();}
+
     public static class Builder<T extends Entity> {
         private final EntityType.EntityFactory<T> factory;
         private final MobCategory category;
@@ -1207,6 +_,10 @@
         private EntityAttachments.Builder attachments = EntityAttachments.builder();
         private FeatureFlagSet requiredFeatures = FeatureFlags.VANILLA_SET;
 
+        private java.util.function.Predicate<EntityType<?>> velocityUpdateSupplier = EntityType::defaultTrackDeltasSupplier;
+        private java.util.function.ToIntFunction<EntityType<?>> trackingRangeSupplier = EntityType::defaultTrackingRangeSupplier;
+        private java.util.function.ToIntFunction<EntityType<?>> updateIntervalSupplier = EntityType::defaultUpdateIntervalSupplier;
+
         private Builder(EntityType.EntityFactory<T> p_20696_, MobCategory p_20697_) {
             this.factory = p_20696_;
             this.category = p_20697_;
@@ -1314,6 +_,21 @@
             return this;
         }
 
+        public EntityType.Builder<T> setUpdateInterval(int interval) {
+             this.updateIntervalSupplier = t->interval;
+             return this;
+        }
+
+        public EntityType.Builder<T> setTrackingRange(int range) {
+             this.trackingRangeSupplier = t->range;
+             return this;
+        }
+
+        public EntityType.Builder<T> setShouldReceiveVelocityUpdates(boolean value) {
+             this.velocityUpdateSupplier = t->value;
+             return this;
+        }
+
         public EntityType<T> build(String p_20713_) {
             if (this.serialize) {
                 Util.fetchChoiceType(References.ENTITY_TREE, p_20713_);
@@ -1331,7 +_,10 @@
                 this.spawnDimensionsScale,
                 this.clientTrackingRange,
                 this.updateInterval,
-                this.requiredFeatures
+                this.requiredFeatures,
+                velocityUpdateSupplier,
+                trackingRangeSupplier,
+                updateIntervalSupplier
             );
         }
     }
