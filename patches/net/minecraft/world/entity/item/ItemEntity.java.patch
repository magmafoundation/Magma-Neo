--- a/net/minecraft/world/entity/item/ItemEntity.java
+++ b/net/minecraft/world/entity/item/ItemEntity.java
@@ -49,6 +_,11 @@
     @Nullable
     public UUID target;
     public final float bobOffs;
+    /**
+     * The maximum age of this EntityItem.  The item is expired once this is reached.
+     */
+    public int lifespan = ItemEntity.LIFETIME;
+    private int lastTick = net.minecraft.server.MinecraftServer.currentTick - 1; // CraftBukkit
 
     public ItemEntity(EntityType<? extends ItemEntity> p_31991_, Level p_31992_) {
         super(p_31991_, p_31992_);
@@ -67,6 +_,7 @@
         this.setPos(p_149664_, p_149665_, p_149666_);
         this.setDeltaMovement(p_149668_, p_149669_, p_149670_);
         this.setItem(p_149667_);
+        this.lifespan = (p_149667_.getItem() == null ? ItemEntity.LIFETIME : p_149667_.getEntityLifespan(p_149663_));
     }
 
     private ItemEntity(ItemEntity p_31994_) {
@@ -75,6 +_,7 @@
         this.copyPosition(p_31994_);
         this.age = p_31994_.age;
         this.bobOffs = p_31994_.bobOffs;
+        this.lifespan = p_31994_.lifespan;
     }
 
     @Override
@@ -120,18 +_,25 @@
 
     @Override
     public void tick() {
+        if (getItem().onEntityItemUpdate(this)) return;
         if (this.getItem().isEmpty()) {
-            this.discard();
+            this.discard(org.bukkit.event.entity.EntityRemoveEvent.Cause.DESPAWN); // CraftBukkit - add Bukkit remove cause
         } else {
             super.tick();
-            if (this.pickupDelay > 0 && this.pickupDelay != 32767) {
-                this.pickupDelay--;
-            }
+            // CraftBukkit start - Use wall time for pickup and despawn timers
+            int elapsedTicks = net.minecraft.server.MinecraftServer.currentTick - this.lastTick;
+            if (this.pickupDelay != 32767) this.pickupDelay -= elapsedTicks;
+            if (this.age != -32768) this.age += elapsedTicks;
+            this.lastTick = net.minecraft.server.MinecraftServer.currentTick;
+            // CraftBukkit end
 
             this.xo = this.getX();
             this.yo = this.getY();
             this.zo = this.getZ();
             Vec3 vec3 = this.getDeltaMovement();
+            net.neoforged.neoforge.fluids.FluidType fluidType = this.getMaxHeightFluidType();
+            if (!fluidType.isAir() && !fluidType.isVanilla() && this.getFluidTypeHeight(fluidType) > 0.1F) fluidType.setItemMovement(this);
+            else
             if (this.isInWater() && this.getFluidHeight(FluidTags.WATER) > 0.1F) {
                 this.setUnderwaterMovement();
             } else if (this.isInLava() && this.getFluidHeight(FluidTags.LAVA) > 0.1F) {
@@ -153,7 +_,8 @@
                 this.move(MoverType.SELF, this.getDeltaMovement());
                 float f = 0.98F;
                 if (this.onGround()) {
-                    f = this.level().getBlockState(this.getBlockPosBelowThatAffectsMyMovement()).getBlock().getFriction() * 0.98F;
+                    BlockPos groundPos = getBlockPosBelowThatAffectsMyMovement();
+                    f = this.level().getBlockState(groundPos).getFriction(level(), groundPos, this) * 0.98F;
                 }
 
                 this.setDeltaMovement(this.getDeltaMovement().multiply((double)f, 0.98, (double)f));
@@ -173,9 +_,11 @@
                 this.mergeWithNeighbours();
             }
 
+            /* CraftBukkit start - moved up
             if (this.age != -32768) {
                 this.age++;
             }
+            // CraftBukkit end */
 
             this.hasImpulse = this.hasImpulse | this.updateInWaterStateAndDoFluidPushing();
             if (!this.level().isClientSide) {
@@ -185,7 +_,21 @@
                 }
             }
 
-            if (!this.level().isClientSide && this.age >= 6000) {
+            ItemStack item = this.getItem();
+            if (!this.level().isClientSide && this.age >= lifespan) {
+                // Clamping to MAX_VALUE -1 as age is a Short and going above that would produce an infinite lifespan implicitly (accidentally)
+                this.lifespan = Mth.clamp(lifespan + net.neoforged.neoforge.event.EventHooks.onItemExpire(this), 0, Short.MAX_VALUE - 1);
+                if (this.age >= lifespan) {
+                    // CraftBukkit start - fire ItemDespawnEvent
+                    if (org.bukkit.craftbukkit.event.CraftEventFactory.callItemDespawnEvent(this).isCancelled()) {
+                        this.age = 0;
+                        return;
+                    }
+                    // CraftBukkit end
+                    this.discard(org.bukkit.event.entity.EntityRemoveEvent.Cause.DESPAWN); // CraftBukkit - add Bukkit remove cause
+                }
+            }
+            if (item.isEmpty() && !this.isRemoved()) {
                 this.discard();
             }
         }
@@ -254,11 +_,16 @@
     }
 
     private static void merge(ItemEntity p_32018_, ItemStack p_32019_, ItemEntity p_32020_, ItemStack p_32021_) {
+        // CraftBukkit start
+        if (!org.bukkit.craftbukkit.event.CraftEventFactory.callItemMergeEvent(p_32020_, p_32018_)) {
+            return;
+        }
+        // CraftBukkit end
         merge(p_32018_, p_32019_, p_32021_);
         p_32018_.pickupDelay = Math.max(p_32018_.pickupDelay, p_32020_.pickupDelay);
         p_32018_.age = Math.min(p_32018_.age, p_32020_.age);
         if (p_32021_.isEmpty()) {
-            p_32020_.discard();
+            p_32020_.discard(org.bukkit.event.entity.EntityRemoveEvent.Cause.MERGE); // CraftBukkit - add Bukkit remove cause);
         }
     }
 
@@ -278,12 +_,17 @@
         } else if (this.level().isClientSide) {
             return true;
         } else {
+            // CraftBukkit start
+            if (org.bukkit.craftbukkit.event.CraftEventFactory.handleNonLivingEntityDamageEvent(this, p_32013_, p_32014_)) {
+                return false;
+            }
+            // CraftBukkit end
             this.markHurt();
             this.health = (int)((float)this.health - p_32014_);
             this.gameEvent(GameEvent.ENTITY_DAMAGE, p_32013_.getEntity());
             if (this.health <= 0) {
-                this.getItem().onDestroyed(this);
-                this.discard();
+                this.getItem().onDestroyed(this, p_32013_);
+                this.discard(org.bukkit.event.entity.EntityRemoveEvent.Cause.DEATH); // CraftBukkit - add Bukkit remove cause
             }
 
             return true;
@@ -295,6 +_,7 @@
         p_32050_.putShort("Health", (short)this.health);
         p_32050_.putShort("Age", (short)this.age);
         p_32050_.putShort("PickupDelay", (short)this.pickupDelay);
+        p_32050_.putInt("Lifespan", this.lifespan);
         if (this.thrower != null) {
             p_32050_.putUUID("Thrower", this.thrower);
         }
@@ -315,6 +_,9 @@
         if (p_32034_.contains("PickupDelay")) {
             this.pickupDelay = p_32034_.getShort("PickupDelay");
         }
+        if (p_32034_.contains("Lifespan")) {
+            this.lifespan = p_32034_.getInt("Lifespan");
+        }
 
         if (p_32034_.hasUUID("Owner")) {
             this.target = p_32034_.getUUID("Owner");
@@ -333,7 +_,7 @@
         }
 
         if (this.getItem().isEmpty()) {
-            this.discard();
+            this.discard(null); // CraftBukkit - add Bukkit remove cause
         }
     }
 
@@ -343,10 +_,62 @@
             ItemStack itemstack = this.getItem();
             Item item = itemstack.getItem();
             int i = itemstack.getCount();
-            if (this.pickupDelay == 0 && (this.target == null || this.target.equals(p_32040_.getUUID())) && p_32040_.getInventory().add(itemstack)) {
+
+            // CraftBukkit start - fire PlayerPickupItemEvent
+            int canHold = p_32040_.getInventory().canHold(itemstack);
+            int remaining = i - canHold;
+            if (this.pickupDelay <= 0 && canHold > 0) {
+                itemstack.setCount(canHold);
+                // Call legacy event
+                org.bukkit.event.player.PlayerPickupItemEvent playerEvent = new org.bukkit.event.player.PlayerPickupItemEvent((org.bukkit.entity.Player) p_32040_.getBukkitEntity(), (org.bukkit.entity.Item) this.getBukkitEntity(), remaining);
+                playerEvent.setCancelled(!playerEvent.getPlayer().getCanPickupItems());
+                this.level().getCraftServer().getPluginManager().callEvent(playerEvent);
+                if (playerEvent.isCancelled()) {
+                    itemstack.setCount(i); // SPIGOT-5294 - restore count
+                    return;
+                }
+                // Call newer event afterwards
+                org.bukkit.event.entity.EntityPickupItemEvent entityEvent = new org.bukkit.event.entity.EntityPickupItemEvent((org.bukkit.entity.Player) p_32040_.getBukkitEntity(), (org.bukkit.entity.Item) this.getBukkitEntity(), remaining);
+                entityEvent.setCancelled(!entityEvent.getEntity().getCanPickupItems());
+                this.level().getCraftServer().getPluginManager().callEvent(entityEvent);
+                if (entityEvent.isCancelled()) {
+                    itemstack.setCount(i); // SPIGOT-5294 - restore count
+                    return;
+                }
+                // Update the ItemStack if it was changed in the event
+                ItemStack current = this.getItem();
+                if (!itemstack.equals(current)) {
+                    itemstack = current;
+                } else {
+                    itemstack.setCount(canHold + remaining); // = i
+                }
+                // Possibly < 0; fix here so we do not have to modify code below
+                this.pickupDelay = 0;
+            } else if (this.pickupDelay == 0) {
+                // ensure that the code below isn't triggered if canHold says we can't pick the items up
+                this.pickupDelay = -1;
+            }
+            // CraftBukkit end
+
+
+            // Neo: Fire item pickup pre/post and adjust handling logic to adhere to the event result.
+            var result = net.neoforged.neoforge.event.EventHooks.fireItemPickupPre(this, p_32040_).canPickup();
+            if (result.isFalse()) {
+                return;
+            }
+
+            // Make a copy of the original stack for use in ItemEntityPickupEvent.Post
+            ItemStack originalCopy = itemstack.copy();
+            // Subvert the vanilla conditions (pickup delay and target check) if the result is true.
+            if ((result.isTrue() || this.pickupDelay == 0 && (this.target == null || this.target.equals(p_32040_.getUUID()))) && p_32040_.getInventory().add(itemstack)) {
+                // Fire ItemEntityPickupEvent.Post
+                net.neoforged.neoforge.event.EventHooks.fireItemPickupPost(this, p_32040_, originalCopy);
+                // Update `i` to reflect the actual pickup amount. Vanilla is wrong here and always reports the whole stack.
+                i = originalCopy.getCount() - itemstack.getCount();
+
                 p_32040_.take(this, i);
                 if (itemstack.isEmpty()) {
-                    this.discard();
+                    this.discard(org.bukkit.event.entity.EntityRemoveEvent.Cause.PICKUP); // CraftBukkit - add Bukkit remove cause
                     itemstack.setCount(i);
                 }
 
@@ -398,6 +_,15 @@
         this.target = p_266724_;
     }
 
+    /**
+     * Neo: Add getter for ItemEntity's {@link ItemEntity#target target}.
+     * @return The {@link ItemEntity#target target} that can pick up this item entity (if {@code null}, anyone can pick it up)
+     */
+    @Nullable
+    public UUID getTarget() {
+        return this.target;
+    }
+
     public void setThrower(Entity p_306324_) {
         this.thrower = p_306324_.getUUID();
         this.cachedThrower = p_306324_;
@@ -437,7 +_,7 @@
 
     public void makeFakeItem() {
         this.setNeverPickUp();
-        this.age = 5999;
+        this.age = getItem().getEntityLifespan(this.level()) - 1;
     }
 
     public float getSpin(float p_32009_) {
