--- a/net/minecraft/world/item/BlockItem.java
+++ b/net/minecraft/world/item/BlockItem.java
@@ -62,6 +_,12 @@
                 return InteractionResult.FAIL;
             } else {
                 BlockState blockstate = this.getPlacementState(blockplacecontext);
+                // CraftBukkit start - special case for handling block placement with water lilies and snow buckets
+                org.bukkit.block.BlockState blockstates = null;
+                if (this instanceof PlaceOnWaterBlockItem || this instanceof SolidBucketItem) {
+                    blockstates = org.bukkit.craftbukkit.block.CraftBlockStates.getBlockState(blockplacecontext.getLevel(), blockplacecontext.getClickedPos());
+                }
+                // CraftBukkit end
                 if (blockstate == null) {
                     return InteractionResult.FAIL;
                 } else if (!this.placeBlock(blockplacecontext, blockstate)) {
@@ -77,20 +_,25 @@
                         this.updateCustomBlockEntityTag(blockpos, level, player, itemstack, blockstate1);
                         updateBlockEntityComponents(level, blockpos, itemstack);
                         blockstate1.getBlock().setPlacedBy(level, blockpos, blockstate1, player, itemstack);
+                        // CraftBukkit start
+                        if (blockstates != null) {
+                            org.bukkit.event.block.BlockPlaceEvent placeEvent = org.bukkit.craftbukkit.event.CraftEventFactory.callBlockPlaceEvent((net.minecraft.server.level.ServerLevel) level, player, blockplacecontext.getHand(), blockstates, blockpos.getX(), blockpos.getY(), blockpos.getZ());
+                            if (placeEvent != null && (placeEvent.isCancelled() || !placeEvent.canBuild())) {
+                                blockstates.update(true, false);
+                                if (this instanceof SolidBucketItem) {
+                                    ((net.minecraft.server.level.ServerPlayer) player).getBukkitEntity().updateInventory(); // SPIGOT-4541
+                                }
+                                return InteractionResult.FAIL;
+                            }
+                        }
+                        // CraftBukkit end
                         if (player instanceof ServerPlayer) {
                             CriteriaTriggers.PLACED_BLOCK.trigger((ServerPlayer)player, blockpos, itemstack);
                         }
                     }
 
-                    SoundType soundtype = blockstate1.getSoundType();
-                    level.playSound(
-                        player,
-                        blockpos,
-                        this.getPlaceSound(blockstate1),
-                        SoundSource.BLOCKS,
-                        (soundtype.getVolume() + 1.0F) / 2.0F,
-                        soundtype.getPitch() * 0.8F
-                    );
+                    SoundType soundtype = blockstate1.getSoundType(level, blockpos, p_40577_.getPlayer());
+
                     level.gameEvent(GameEvent.BLOCK_PLACE, blockpos, GameEvent.Context.of(player, blockstate1));
                     itemstack.consume(1, player);
                     return InteractionResult.sidedSuccess(level.isClientSide);
@@ -99,10 +_,16 @@
         }
     }
 
+    @Deprecated //Forge: Use more sensitive version {@link BlockItem#getPlaceSound(BlockState, IBlockReader, BlockPos, Entity) }
     protected SoundEvent getPlaceSound(BlockState p_40588_) {
         return p_40588_.getSoundType().getPlaceSound();
     }
 
+    //Forge: Sensitive version of BlockItem#getPlaceSound
+    protected SoundEvent getPlaceSound(BlockState state, Level world, BlockPos pos, Player entity) {
+        return state.getSoundType(world, pos, entity).getPlaceSound();
+    }
+
     @Nullable
     public BlockPlaceContext updatePlacementContext(BlockPlaceContext p_40609_) {
         return p_40609_;
@@ -143,8 +_,13 @@
     protected boolean canPlace(BlockPlaceContext p_40611_, BlockState p_40612_) {
         Player player = p_40611_.getPlayer();
         CollisionContext collisioncontext = player == null ? CollisionContext.empty() : CollisionContext.of(player);
-        return (!this.mustSurvive() || p_40612_.canSurvive(p_40611_.getLevel(), p_40611_.getClickedPos()))
-            && p_40611_.getLevel().isUnobstructed(p_40612_, p_40611_.getClickedPos(), collisioncontext);
+        // CraftBukkit start - store default return
+        boolean defaultReturn = (!this.mustSurvive() || p_40612_.canSurvive(p_40611_.getLevel(), p_40611_.getClickedPos())) && p_40611_.getLevel().isUnobstructed(p_40612_, p_40611_.getClickedPos(), collisioncontext);
+        org.bukkit.entity.Player playerCB = (p_40611_.getPlayer() instanceof ServerPlayer) ? (org.bukkit.entity.Player) p_40611_.getPlayer().getBukkitEntity() : null;
+        org.bukkit.event.block.BlockCanBuildEvent event = new org.bukkit.event.block.BlockCanBuildEvent(org.bukkit.craftbukkit.block.CraftBlock.at(p_40611_.getLevel(), p_40611_.getClickedPos()), playerCB, org.bukkit.craftbukkit.block.data.CraftBlockData.fromData(p_40612_), defaultReturn);
+        p_40611_.getLevel().getCraftServer().getPluginManager().callEvent(event);
+        return event.isBuildable();
+        // CraftBukkit end
     }
 
     protected boolean mustSurvive() {
@@ -193,6 +_,10 @@
 
     public void registerBlocks(Map<Block, Item> p_40607_, Item p_40608_) {
         p_40607_.put(this.getBlock(), p_40608_);
+    }
+
+    public void removeFromBlockToItemMap(Map<Block, Item> blockToItemMap, Item itemIn) {
+        blockToItemMap.remove(this.getBlock());
     }
 
     @Override
