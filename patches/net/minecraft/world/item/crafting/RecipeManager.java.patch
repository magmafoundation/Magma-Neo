--- a/net/minecraft/world/item/crafting/RecipeManager.java
+++ b/net/minecraft/world/item/crafting/RecipeManager.java
@@ -50,16 +_,22 @@
         this.hasErrors = false;
         Builder<RecipeType<?>, RecipeHolder<?>> builder = ImmutableMultimap.builder();
         com.google.common.collect.ImmutableMap.Builder<ResourceLocation, RecipeHolder<?>> builder1 = ImmutableMap.builder();
-        RegistryOps<JsonElement> registryops = this.registries.createSerializationContext(JsonOps.INSTANCE);
+        RegistryOps<JsonElement> registryops = this.makeConditionalOps(); // Neo: add condition context
 
         for (Entry<ResourceLocation, JsonElement> entry : p_44037_.entrySet()) {
             ResourceLocation resourcelocation = entry.getKey();
+            if (resourcelocation.getPath().startsWith("_")) continue; //Forge: filter anything beginning with "_" as it's used for metadata.
 
             try {
-                Recipe<?> recipe = Recipe.CODEC.parse(registryops, entry.getValue()).getOrThrow(JsonParseException::new);
+                var decoded = Recipe.CONDITIONAL_CODEC.parse(registryops, entry.getValue()).getOrThrow(JsonParseException::new);
+                decoded.ifPresentOrElse(r -> {
+                Recipe<?> recipe = r.carrier();
                 RecipeHolder<?> recipeholder = new RecipeHolder<>(resourcelocation, recipe);
                 builder.put(recipe.getType(), recipeholder);
                 builder1.put(resourcelocation, recipeholder);
+                }, () -> {
+                    LOGGER.debug("Skipping loading recipe {} as its conditions were not met", resourcelocation);
+                });
             } catch (IllegalArgumentException | JsonParseException jsonparseexception) {
                 LOGGER.error("Parsing error loading recipe {}", resourcelocation, jsonparseexception);
             }
@@ -70,6 +_,19 @@
         LOGGER.info("Loaded {} recipes", this.byType.size());
     }
 
+    // CraftBukkit start
+    public void addRecipe(RecipeHolder<?> irecipe) {
+        Collection<RecipeHolder<?>> map = this.byType.get(irecipe.value().getType()); // CraftBukkit
+
+        if (byName.containsKey(irecipe.id())) {
+            throw new IllegalStateException("Duplicate recipe ignored with ID " + irecipe.id());
+        } else {
+            map.add(irecipe);
+            byName.put(irecipe.id(), irecipe);
+        }
+    }
+    // CraftBukkit end
+
     public boolean hadErrorsLoading() {
         return this.hasErrors;
     }
@@ -167,9 +_,29 @@
             builder1.put(recipeholder.id(), recipeholder);
         }
 
-        this.byType = builder.build();
-        this.byName = builder1.build();
-    }
+        // CraftBukkit start - mutable
+        this.byType = com.google.common.collect.LinkedHashMultimap.create(builder.build());
+        this.byName = com.google.common.collect.Maps.newHashMap(builder1.build());
+        // CraftBukkit end
+    }
+
+    // CraftBukkit start
+    public boolean removeRecipe(ResourceLocation mcKey) {
+        java.util.Iterator<RecipeHolder<?>> iter = byType.values().iterator();
+        while (iter.hasNext()) {
+            RecipeHolder<?> recipe = iter.next();
+            if (recipe.id().equals(mcKey)) {
+                iter.remove();
+            }
+        }
+        return byName.remove(mcKey) != null;
+    }
+
+    public void clearRecipes() {
+        this.byType = com.google.common.collect.LinkedHashMultimap.create();
+        this.byName = com.google.common.collect.Maps.newHashMap();
+    }
+    // CraftBukkit end
 
     public static <I extends RecipeInput, T extends Recipe<I>> RecipeManager.CachedCheck<I, T> createCheck(final RecipeType<T> p_220268_) {
         return new RecipeManager.CachedCheck<I, T>() {
