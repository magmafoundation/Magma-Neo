--- a/net/minecraft/world/inventory/AbstractContainerMenu.java
+++ b/net/minecraft/world/inventory/AbstractContainerMenu.java
@@ -62,6 +_,27 @@
     private ContainerSynchronizer synchronizer;
     private boolean suppressRemoteUpdates;
 
+    // CraftBukkit start
+    public boolean checkReachable = true;
+    public abstract org.bukkit.inventory.InventoryView getBukkitView();
+    public void transferTo(AbstractContainerMenu other, org.bukkit.craftbukkit.entity.CraftHumanEntity player) {
+        org.bukkit.inventory.InventoryView source = this.getBukkitView(), destination = other.getBukkitView();
+        ((org.bukkit.craftbukkit.inventory.CraftInventory) source.getTopInventory()).getInventory().onClose(player);
+        ((org.bukkit.craftbukkit.inventory.CraftInventory) source.getBottomInventory()).getInventory().onClose(player);
+        ((org.bukkit.craftbukkit.inventory.CraftInventory) destination.getTopInventory()).getInventory().onOpen(player);
+        ((org.bukkit.craftbukkit.inventory.CraftInventory) destination.getBottomInventory()).getInventory().onOpen(player);
+    }
+    private net.minecraft.network.chat.Component title;
+    public final net.minecraft.network.chat.Component getTitle() {
+        com.google.common.base.Preconditions.checkState(this.title != null, "Title not set");
+        return this.title;
+    }
+    public final void setTitle(net.minecraft.network.chat.Component title) {
+        com.google.common.base.Preconditions.checkState(this.title == null, "Title already set");
+        this.title = title;
+    }
+    // CraftBukkit end
+
     protected AbstractContainerMenu(@Nullable MenuType<?> p_38851_, int p_38852_) {
         this.menuType = p_38851_;
         this.containerId = p_38852_;
@@ -150,6 +_,15 @@
         }
     }
 
+    // CraftBukkit start
+    public void broadcastCarriedItem() {
+        this.remoteCarried = this.getCarried().copy();
+        if (this.synchronizer != null) {
+            this.synchronizer.sendCarriedChange(this, this.remoteCarried);
+        }
+    }
+    // CraftBukkit end
+
     public void removeSlotListener(ContainerListener p_38944_) {
         this.containerListeners.remove(p_38944_);
     }
@@ -325,7 +_,7 @@
                 }
             } else if (this.quickcraftStatus == 2) {
                 if (!this.quickcraftSlots.isEmpty()) {
-                    if (this.quickcraftSlots.size() == 1) {
+                    if (false && this.quickcraftSlots.size() == 1) { // CraftBukkit - treat everything as a drag since we are unable to easily call InventoryClickEvent instead
                         int i1 = this.quickcraftSlots.iterator().next().index;
                         this.resetQuickCraft();
                         this.doClick(i1, this.quickcraftType, ClickType.PICKUP, p_150434_);
@@ -339,6 +_,7 @@
                     }
 
                     int k1 = this.getCarried().getCount();
+                    java.util.Map<Integer, net.minecraft.world.item.ItemStack> draggedSlots = new java.util.HashMap<Integer, net.minecraft.world.item.ItemStack>(); // CraftBukkit - Store slots from drag in map (raw slot id -> new stack)
 
                     for (Slot slot1 : this.quickcraftSlots) {
                         ItemStack itemstack1 = this.getCarried();
@@ -351,12 +_,51 @@
                             int k = Math.min(itemstack3.getMaxStackSize(), slot1.getMaxStackSize(itemstack3));
                             int l = Math.min(getQuickCraftPlaceCount(this.quickcraftSlots, this.quickcraftType, itemstack3) + j, k);
                             k1 -= l - j;
-                            slot1.setByPlayer(itemstack3.copyWithCount(l));
-                        }
-                    }
-
-                    itemstack3.setCount(k1);
-                    this.setCarried(itemstack3);
+                            // slot1.setByPlayer(itemstack3.copyWithCount(l));
+                            draggedSlots.put(slot1.index, itemstack1.copyWithCount(l)); // CraftBukkit - Put in map instead of setting
+                        }
+                    }
+
+//                    itemstack3.setCount(k1);
+//                    this.setCarried(itemstack3);
+
+                    // CraftBukkit start - InventoryDragEvent
+                    org.bukkit.inventory.InventoryView view = getBukkitView();
+                    org.bukkit.inventory.ItemStack newcursor = org.bukkit.craftbukkit.inventory.CraftItemStack.asCraftMirror(itemstack3);
+                    newcursor.setAmount(k1);
+                    java.util.Map<Integer, org.bukkit.inventory.ItemStack> eventmap = new java.util.HashMap<Integer, org.bukkit.inventory.ItemStack>();
+                    for (java.util.Map.Entry<Integer, ItemStack> ditem : draggedSlots.entrySet()) {
+                        eventmap.put(ditem.getKey(), org.bukkit.craftbukkit.inventory.CraftItemStack.asBukkitCopy(ditem.getValue()));
+                    }
+
+                    // It's essential that we set the cursor to the new value here to prevent item duplication if a plugin closes the inventory.
+                    ItemStack oldCursor = this.getCarried();
+                    this.setCarried(org.bukkit.craftbukkit.inventory.CraftItemStack.asNMSCopy(newcursor));
+
+                    org.bukkit.event.inventory.InventoryDragEvent event = new org.bukkit.event.inventory.InventoryDragEvent(view, (newcursor.getType() != org.bukkit.Material.AIR ? newcursor : null), org.bukkit.craftbukkit.inventory.CraftItemStack.asBukkitCopy(oldCursor), this.quickcraftType == 1, eventmap);
+                    p_150434_.level().getCraftServer().getPluginManager().callEvent(event);
+
+                    // Whether or not a change was made to the inventory that requires an update.
+                    boolean needsUpdate = event.getResult() != org.bukkit.event.Event.Result.DEFAULT;
+
+                    if (event.getResult() != org.bukkit.event.Event.Result.DENY) {
+                        for (java.util.Map.Entry<Integer, ItemStack> dslot : draggedSlots.entrySet()) {
+                            view.setItem(dslot.getKey(), org.bukkit.craftbukkit.inventory.CraftItemStack.asBukkitCopy(dslot.getValue()));
+                        }
+                        // The only time the carried item will be set to null is if the inventory is closed by the server.
+                        // If the inventory is closed by the server, then the cursor items are dropped.  This is why we change the cursor early.
+                        if (this.getCarried() != null) {
+                            this.setCarried(org.bukkit.craftbukkit.inventory.CraftItemStack.asNMSCopy(event.getCursor()));
+                            needsUpdate = true;
+                        }
+                    } else {
+                        this.setCarried(oldCursor);
+                    }
+
+                    if (needsUpdate && p_150434_ instanceof ServerPlayer) {
+                        this.sendAllDataToRemote();
+                    }
+                    // CraftBukkit end
                 }
 
                 this.resetQuickCraft();
@@ -370,8 +_,11 @@
             if (p_150431_ == -999) {
                 if (!this.getCarried().isEmpty()) {
                     if (clickaction == ClickAction.PRIMARY) {
-                        p_150434_.drop(this.getCarried(), true);
+                        // CraftBukkit start
+                        ItemStack carried = this.getCarried();
                         this.setCarried(ItemStack.EMPTY);
+                        p_150434_.drop(carried, true);
+                        // CraftBukkit start
                     } else {
                         p_150434_.drop(this.getCarried().split(1), true);
                     }
@@ -435,6 +_,15 @@
                 }
 
                 slot7.setChanged();
+                // CraftBukkit start - Make sure the client has the right slot contents
+                if (p_150434_ instanceof ServerPlayer && slot7.getMaxStackSize() != 64) {
+                    ((ServerPlayer) p_150434_).connection.send(new net.minecraft.network.protocol.game.ClientboundContainerSetSlotPacket(this.containerId, this.incrementStateId(), slot7.index, slot7.getItem()));
+                    // Updating a crafting inventory makes the client reset the result slot, have to send it again
+                    if (this.getBukkitView().getType() == org.bukkit.event.inventory.InventoryType.WORKBENCH || this.getBukkitView().getType() == org.bukkit.event.inventory.InventoryType.CRAFTING) {
+                        ((ServerPlayer) p_150434_).connection.send(new net.minecraft.network.protocol.game.ClientboundContainerSetSlotPacket(this.containerId, this.incrementStateId(), 0, this.getSlot(0).getItem()));
+                    }
+                }
+                // CraftBukkit end
             }
         } else if (p_150433_ == ClickType.SWAP && (p_150432_ >= 0 && p_150432_ < 9 || p_150432_ == 40)) {
             ItemStack itemstack2 = inventory.getItem(p_150432_);
@@ -511,6 +_,11 @@
     }
 
     private boolean tryItemClickBehaviourOverride(Player p_249615_, ClickAction p_250300_, Slot p_249384_, ItemStack p_251073_, ItemStack p_252026_) {
+        // Neo: Fire the ItemStackedOnOtherEvent, and return true if it was cancelled (meaning the event was handled). Returning true will trigger the container to stop processing further logic.
+        if (net.neoforged.neoforge.common.CommonHooks.onItemStackedOn(p_251073_, p_252026_, p_249384_, p_250300_, p_249615_, createCarriedSlotAccess())) {
+            return true;
+        }
+
         FeatureFlagSet featureflagset = p_249615_.level().enabledFeatures();
         return p_252026_.isItemEnabled(featureflagset) && p_252026_.overrideStackedOnOther(p_249384_, p_250300_, p_249615_)
             ? true
@@ -541,13 +_,14 @@
         if (p_38940_ instanceof ServerPlayer) {
             ItemStack itemstack = this.getCarried();
             if (!itemstack.isEmpty()) {
+                this.setCarried(ItemStack.EMPTY); // CraftBukkit - SPIGOT-4556 - from below
                 if (p_38940_.isAlive() && !((ServerPlayer)p_38940_).hasDisconnected()) {
                     p_38940_.getInventory().placeItemBackInInventory(itemstack);
                 } else {
                     p_38940_.drop(itemstack, false);
                 }
 
-                this.setCarried(ItemStack.EMPTY);
+                // this.setCarried(ItemStack.EMPTY); // CraftBukkit - moved up
             }
         }
     }
@@ -727,6 +_,11 @@
     }
 
     public ItemStack getCarried() {
+        // CraftBukkit start
+        if (this.carried.isEmpty()) {
+            this.setCarried(ItemStack.EMPTY);
+        }
+        // CraftBukkit end
         return this.carried;
     }
 
