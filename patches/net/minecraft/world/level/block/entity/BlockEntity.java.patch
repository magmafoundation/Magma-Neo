--- a/net/minecraft/world/level/block/entity/BlockEntity.java
+++ b/net/minecraft/world/level/block/entity/BlockEntity.java
@@ -27,8 +_,15 @@
 import net.minecraft.world.level.block.state.BlockState;
 import org.slf4j.Logger;
 
-public abstract class BlockEntity {
+public abstract class BlockEntity extends net.neoforged.neoforge.attachment.AttachmentHolder implements net.neoforged.neoforge.common.extensions.IBlockEntityExtension {
+
+    // CraftBukkit start - data containers
+    private static final org.bukkit.craftbukkit.persistence.CraftPersistentDataTypeRegistry DATA_TYPE_REGISTRY = new org.bukkit.craftbukkit.persistence.CraftPersistentDataTypeRegistry();
+    public org.bukkit.craftbukkit.persistence.CraftPersistentDataContainer persistentDataContainer;
+    // CraftBukkit end
+
     private static final Logger LOGGER = LogUtils.getLogger();
+    @Deprecated // Neo: always use getType()
     private final BlockEntityType<?> type;
     @Nullable
     protected Level level;
@@ -36,6 +_,8 @@
     protected boolean remove;
     private BlockState blockState;
     private DataComponentMap components = DataComponentMap.EMPTY;
+    @Nullable
+    private CompoundTag customPersistentData;
 
     public BlockEntity(BlockEntityType<?> p_155228_, BlockPos p_155229_, BlockState p_155230_) {
         this.type = p_155228_;
@@ -51,7 +_,7 @@
     }
 
     public boolean isValidBlockState(BlockState p_353131_) {
-        return this.type.isValid(p_353131_);
+        return this.getType().isValid(p_353131_); // Neo: use getter so correct type is checked for modded subclasses
     }
 
     public static BlockPos getPosFromTag(CompoundTag p_187473_) {
@@ -72,6 +_,16 @@
     }
 
     protected void loadAdditional(CompoundTag p_338466_, HolderLookup.Provider p_338445_) {
+        if (p_338466_.contains("NeoForgeData", net.minecraft.nbt.Tag.TAG_COMPOUND)) this.customPersistentData = p_338466_.getCompound("NeoForgeData");
+        if (p_338466_.contains(ATTACHMENTS_NBT_KEY, net.minecraft.nbt.Tag.TAG_COMPOUND)) deserializeAttachments(p_338445_, p_338466_.getCompound(ATTACHMENTS_NBT_KEY));
+
+        // CraftBukkit start - read container
+        this.persistentDataContainer = new org.bukkit.craftbukkit.persistence.CraftPersistentDataContainer(DATA_TYPE_REGISTRY);
+        net.minecraft.nbt.Tag persistentDataTag = p_338466_.get("PublicBukkitValues");
+        if (persistentDataTag instanceof CompoundTag) {
+            this.persistentDataContainer.putAll((CompoundTag) persistentDataTag);
+        }
+        // CraftBukkit end
     }
 
     public final void loadWithComponents(CompoundTag p_338356_, HolderLookup.Provider p_338558_) {
@@ -87,6 +_,9 @@
     }
 
     protected void saveAdditional(CompoundTag p_187471_, HolderLookup.Provider p_323635_) {
+        if (this.customPersistentData != null) p_187471_.put("NeoForgeData", this.customPersistentData.copy());
+        var attachmentsTag = serializeAttachments(p_323635_);
+        if (attachmentsTag != null) p_187471_.put(ATTACHMENTS_NBT_KEY, attachmentsTag);
     }
 
     public final CompoundTag saveWithFullMetadata(HolderLookup.Provider p_323767_) {
@@ -108,6 +_,11 @@
             .encodeStart(p_324030_.createSerializationContext(NbtOps.INSTANCE), this.components)
             .resultOrPartial(p_337988_ -> LOGGER.warn("Failed to save components: {}", p_337988_))
             .ifPresent(p_337994_ -> compoundtag.merge((CompoundTag)p_337994_));
+        // CraftBukkit start - store container
+        if (this.persistentDataContainer != null && !this.persistentDataContainer.isEmpty()) {
+            compoundtag.put("PublicBukkitValues", this.persistentDataContainer.toTagCompound());
+        }
+        // CraftBukkit end
         return compoundtag;
     }
 
@@ -216,10 +_,14 @@
 
     public void setRemoved() {
         this.remove = true;
+        this.invalidateCapabilities();
+        requestModelDataUpdate();
     }
 
     public void clearRemoved() {
         this.remove = false;
+        // Neo: invalidate capabilities on block entity placement
+        invalidateCapabilities();
     }
 
     public boolean triggerEvent(int p_58889_, int p_58890_) {
@@ -246,6 +_,27 @@
         return this.type;
     }
 
+    @Override
+    public CompoundTag getPersistentData() {
+        if (this.customPersistentData == null)
+            this.customPersistentData = new CompoundTag();
+        return this.customPersistentData;
+    }
+
+    @Override
+    @Nullable
+    public final <T> T setData(net.neoforged.neoforge.attachment.AttachmentType<T> type, T data) {
+        setChanged();
+        return super.setData(type, data);
+    }
+
+    @Override
+    @Nullable
+    public final <T> T removeData(net.neoforged.neoforge.attachment.AttachmentType<T> type) {
+        setChanged();
+        return super.removeData(type);
+    }
+
     @Deprecated
     public void setBlockState(BlockState p_155251_) {
         this.validateBlockState(p_155251_);
@@ -260,6 +_,12 @@
     }
 
     public final void applyComponents(DataComponentMap p_330364_, DataComponentPatch p_338381_) {
+        // CraftBukkit start
+        this.applyComponentsSet(p_330364_, p_338381_);
+    }
+
+    public final Set<DataComponentType<?>> applyComponentsSet(DataComponentMap p_330364_, DataComponentPatch p_338381_) {
+        // CraftBukkit end
         final Set<DataComponentType<?>> set = new HashSet<>();
         set.add(DataComponents.BLOCK_ENTITY_DATA);
         final DataComponentMap datacomponentmap = PatchedDataComponentMap.fromPatch(p_330364_, p_338381_);
@@ -279,6 +_,11 @@
         });
         DataComponentPatch datacomponentpatch = p_338381_.forget(set::contains);
         this.components = datacomponentpatch.split().added();
+
+        // CraftBukkit start
+        set.remove(DataComponents.BLOCK_ENTITY_DATA); // Remove as never actually added by applyImplicitComponents
+        return set;
+        // CraftBukkit end
     }
 
     protected void collectImplicitComponents(DataComponentMap.Builder p_338210_) {
@@ -313,6 +_,15 @@
         }
     }
 
+    // CraftBukkit start - add method
+    public org.bukkit.inventory.InventoryHolder getOwner() {
+        if (level == null) return null;
+        org.bukkit.block.BlockState state = level.getWorld().getBlockAt(worldPosition.getX(), worldPosition.getY(), worldPosition.getZ()).getState();
+        if (state instanceof org.bukkit.inventory.InventoryHolder) return (org.bukkit.inventory.InventoryHolder) state;
+        return null;
+    }
+    // CraftBukkit end
+
     static class ComponentHelper {
         public static final Codec<DataComponentMap> COMPONENTS_CODEC = DataComponentMap.CODEC.optionalFieldOf("components", DataComponentMap.EMPTY).codec();
 
@@ -325,5 +_,15 @@
         <T> T get(DataComponentType<T> p_338658_);
 
         <T> T getOrDefault(DataComponentType<? extends T> p_338573_, T p_338734_);
+
+        // Neo: Utility for modded component types, to remove the need to invoke '.value()'
+        @Nullable
+        default <T> T get(java.util.function.Supplier<? extends DataComponentType<T>> componentType) {
+            return get(componentType.get());
+        }
+
+        default <T> T getOrDefault(java.util.function.Supplier<? extends DataComponentType<T>> componentType, T value) {
+            return getOrDefault(componentType.get(), value);
+        }
     }
 }
