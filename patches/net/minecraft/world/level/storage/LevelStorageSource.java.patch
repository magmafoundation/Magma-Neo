--- a/net/minecraft/world/level/storage/LevelStorageSource.java
+++ b/net/minecraft/world/level/storage/LevelStorageSource.java
@@ -144,6 +_,7 @@
         PrimaryLevelData primaryleveldata = PrimaryLevelData.parse(
             dynamic, levelsettings, worlddimensions$complete.specialWorldProperty(), worldgensettings.options(), lifecycle
         );
+        primaryleveldata.pdc = ((Dynamic<Tag>) dynamic1).getElement("BukkitValues", null); // CraftBukkit - Add PDC to world
         return new LevelDataAndDimensions(primaryleveldata, worlddimensions$complete);
     }
 
@@ -341,25 +_,39 @@
         return this.backupDir;
     }
 
-    public LevelStorageSource.LevelStorageAccess validateAndCreateAccess(String p_289980_) throws IOException, ContentValidationException {
+    public LevelStorageSource.LevelStorageAccess validateAndCreateAccess(String p_289980_, ResourceKey<LevelStem> dimensionType) throws IOException, ContentValidationException { // CraftBukkit
         Path path = this.getLevelPath(p_289980_);
         List<ForbiddenSymlinkInfo> list = this.worldDirValidator.validateDirectory(path, true);
         if (!list.isEmpty()) {
             throw new ContentValidationException(path, list);
         } else {
-            return new LevelStorageSource.LevelStorageAccess(p_289980_, path);
+            return new LevelStorageSource.LevelStorageAccess(p_289980_, path, dimensionType); // CraftBukkit
         }
     }
 
-    public LevelStorageSource.LevelStorageAccess createAccess(String p_78261_) throws IOException {
+    public LevelStorageSource.LevelStorageAccess createAccess(String p_78261_, ResourceKey<LevelStem> dimensionType) throws IOException { // CraftBukkit
         Path path = this.getLevelPath(p_78261_);
-        return new LevelStorageSource.LevelStorageAccess(p_78261_, path);
+        return new LevelStorageSource.LevelStorageAccess(p_78261_, path, dimensionType); // CraftBukkit
     }
 
     public DirectoryValidator getWorldDirValidator() {
         return this.worldDirValidator;
     }
 
+    // CraftBukkit start
+    public static Path getStorageFolder(Path path, ResourceKey<LevelStem> dimensionType) {
+        if (dimensionType == LevelStem.OVERWORLD) {
+            return path;
+        } else if (dimensionType == LevelStem.NETHER) {
+            return path.resolve("DIM-1");
+        } else if (dimensionType == LevelStem.END) {
+            return path.resolve("DIM1");
+        } else {
+            return path.resolve("dimensions").resolve(dimensionType.location().getNamespace()).resolve(dimensionType.location().getPath());
+        }
+    }
+    // CraftBukkit end
+
     public static record LevelCandidates(List<LevelStorageSource.LevelDirectory> levels) implements Iterable<LevelStorageSource.LevelDirectory> {
         public boolean isEmpty() {
             return this.levels.isEmpty();
@@ -410,8 +_,12 @@
         public final LevelStorageSource.LevelDirectory levelDirectory;
         private final String levelId;
         private final Map<LevelResource, Path> resources = Maps.newHashMap();
+        // CraftBukkit start
+        public final ResourceKey<LevelStem> dimensionType;
 
-        LevelStorageAccess(String p_289967_, Path p_289988_) throws IOException {
+        LevelStorageAccess(String p_289967_, Path p_289988_, final ResourceKey<LevelStem> dimensionType) throws IOException {
+            this.dimensionType = dimensionType;
+            // CraftBukkit end
             this.levelId = p_289967_;
             this.levelDirectory = new LevelStorageSource.LevelDirectory(p_289988_);
             this.lock = DirectoryLock.create(p_289988_);
@@ -454,7 +_,7 @@
         }
 
         public Path getDimensionPath(ResourceKey<Level> p_197395_) {
-            return DimensionType.getStorageFolder(p_197395_, this.levelDirectory.path());
+            return getStorageFolder(this.levelDirectory.path(), this.dimensionType); // CraftBukkit
         }
 
         private void checkLock() {
@@ -463,6 +_,18 @@
             }
         }
 
+        public void readAdditionalLevelSaveData(boolean fallback) {
+            checkLock();
+            Path path = fallback ? this.levelDirectory.oldDataFile() : this.levelDirectory.dataFile();
+            try {
+                var tag = readLightweightData(path);
+                if (tag instanceof CompoundTag compoundTag)
+                    net.neoforged.neoforge.common.CommonHooks.readAdditionalLevelSaveData(compoundTag, this.levelDirectory);
+            } catch (Exception e) {
+                LOGGER.error("Exception reading {}", path, e);
+            }
+        }
+
         public PlayerDataStorage createPlayerStorage() {
             this.checkLock();
             return new PlayerDataStorage(this, LevelStorageSource.this.fixerUpper);
@@ -496,6 +_,7 @@
             CompoundTag compoundtag = p_78292_.createTag(p_78291_, p_78293_);
             CompoundTag compoundtag1 = new CompoundTag();
             compoundtag1.put("Data", compoundtag);
+            net.neoforged.neoforge.common.CommonHooks.writeAdditionalLevelSaveData(p_78292_, compoundtag1);
             this.saveLevelData(compoundtag1);
         }
 
@@ -515,6 +_,10 @@
 
         public Optional<Path> getIconFile() {
             return !this.lock.isValid() ? Optional.empty() : Optional.of(this.levelDirectory.iconFile());
+        }
+
+        public Path getWorldDir() {
+            return baseDir;
         }
 
         public void deleteLevel() throws IOException {
