--- a/net/minecraft/world/level/storage/PrimaryLevelData.java
+++ b/net/minecraft/world/level/storage/PrimaryLevelData.java
@@ -74,6 +_,21 @@
     private boolean wasModded;
     private final Set<String> removedFeatureFlags;
     private final TimerQueue<MinecraftServer> scheduledEvents;
+    private boolean confirmedExperimentalWarning = false;
+
+    // CraftBukkit start - Add world and pdc
+    public net.minecraft.core.Registry<net.minecraft.world.level.dimension.LevelStem> customDimensions;
+    private net.minecraft.server.level.ServerLevel world;
+    protected Tag pdc;
+    public void setWorld(net.minecraft.server.level.ServerLevel world) {
+        if (this.world != null) {
+            return;
+        }
+        this.world = world;
+        world.getWorld().readBukkitValues(pdc);
+        pdc = null;
+    }
+    // CraftBukkit end
 
     private PrimaryLevelData(
         @Nullable CompoundTag p_277888_,
@@ -169,7 +_,7 @@
         Dynamic<T> p_78531_, LevelSettings p_78535_, PrimaryLevelData.SpecialWorldProperty p_250651_, WorldOptions p_251864_, Lifecycle p_78538_
     ) {
         long i = p_78531_.get("Time").asLong(0L);
-        return new PrimaryLevelData(
+        PrimaryLevelData result = new PrimaryLevelData(
             p_78531_.get("Player").flatMap(CompoundTag.CODEC::parse).result().orElse(null),
             p_78531_.get("WasModded").asBoolean(false),
             new BlockPos(p_78531_.get("SpawnX").asInt(0), p_78531_.get("SpawnY").asInt(0), p_78531_.get("SpawnZ").asInt(0)),
@@ -200,7 +_,11 @@
             p_251864_,
             p_250651_,
             p_78538_
-        );
+        ).withConfirmedWarning(p_78538_ != Lifecycle.stable() && p_78531_.get("confirmedExperimentalSettings").asBoolean(false));
+        // Neo:
+        result.setDayTimeFraction(p_78531_.get("neoDayTimeFraction").asFloat(0f));
+        result.setDayTimePerTick(p_78531_.get("neoDayTimePerTick").asFloat(-1f));
+        return result;
     }
 
     @Override
@@ -273,6 +_,11 @@
         if (this.wanderingTraderId != null) {
             p_78547_.putUUID("WanderingTraderId", this.wanderingTraderId);
         }
+        p_78547_.putString("forgeLifecycle", net.neoforged.neoforge.common.CommonHooks.encodeLifecycle(this.settings.getLifecycle()));
+        p_78547_.putBoolean("confirmedExperimentalSettings", this.confirmedExperimentalWarning);
+        // Neo:
+        p_78547_.putFloat("neoDayTimeFraction", dayTimeFraction);
+        p_78547_.putFloat("neoDayTimePerTick", dayTimePerTick);
     }
 
     private static ListTag stringCollectionToTag(Set<String> p_277880_) {
@@ -350,6 +_,20 @@
 
     @Override
     public void setThundering(boolean p_78562_) {
+        // CraftBukkit start
+        if (this.thundering == p_78562_) {
+            return;
+        }
+
+        org.bukkit.World world = org.bukkit.Bukkit.getWorld(getLevelName());
+        if (world != null) {
+            org.bukkit.event.weather.ThunderChangeEvent thunder = new org.bukkit.event.weather.ThunderChangeEvent(world, p_78562_);
+            org.bukkit.Bukkit.getServer().getPluginManager().callEvent(thunder);
+            if (thunder.isCancelled()) {
+                return;
+            }
+        }
+        // CraftBukkit end
         this.thundering = p_78562_;
     }
 
@@ -370,6 +_,20 @@
 
     @Override
     public void setRaining(boolean p_78576_) {
+        // CraftBukkit start
+        if (this.raining == p_78576_) {
+            return;
+        }
+
+        org.bukkit.World world = org.bukkit.Bukkit.getWorld(getLevelName());
+        if (world != null) {
+            org.bukkit.event.weather.WeatherChangeEvent weather = new org.bukkit.event.weather.WeatherChangeEvent(world, p_78576_);
+            org.bukkit.Bukkit.getServer().getPluginManager().callEvent(weather);
+            if (weather.isCancelled()) {
+                return;
+            }
+        }
+        // CraftBukkit end
         this.raining = p_78576_;
     }
 
@@ -436,6 +_,12 @@
     @Override
     public void setDifficulty(Difficulty p_78521_) {
         this.settings = this.settings.withDifficulty(p_78521_);
+        // CraftBukkit start
+        net.minecraft.network.protocol.game.ClientboundChangeDifficultyPacket packet = new net.minecraft.network.protocol.game.ClientboundChangeDifficultyPacket(this.getDifficulty(), this.isDifficultyLocked());
+        for (net.minecraft.server.level.ServerPlayer player : (java.util.List<net.minecraft.server.level.ServerPlayer>) (java.util.List) world.players()) {
+            player.connection.send(packet);
+        }
+        // CraftBukkit end
     }
 
     @Override
@@ -572,10 +_,52 @@
         return this.settings.copy();
     }
 
+    public boolean hasConfirmedExperimentalWarning() {
+        return this.confirmedExperimentalWarning;
+    }
+
+    public PrimaryLevelData withConfirmedWarning(boolean confirmedWarning) { // Builder-like to not patch ctor
+        this.confirmedExperimentalWarning = confirmedWarning;
+        return this;
+    }
+
+    // CraftBukkit start - Check if the name stored in NBT is the correct one
+    public void checkName(String name) {
+        if (!this.settings.levelName.equals(name)) {
+            this.settings.levelName = name;
+        }
+    }
+    // CraftBukkit end
+
     @Deprecated
     public static enum SpecialWorldProperty {
         NONE,
         FLAT,
         DEBUG;
+    }
+
+    // Neo: Variable day time code
+
+    private float dayTimeFraction = 0.0f;
+    private float dayTimePerTick = -1.0f;
+
+    @Override
+    public float getDayTimeFraction() {
+        return dayTimeFraction;
+    }
+
+    @Override
+    public float getDayTimePerTick() {
+        return dayTimePerTick;
+    }
+
+    @Override
+    public void setDayTimeFraction(float dayTimeFraction) {
+        this.dayTimeFraction = dayTimeFraction;
+    }
+
+    @Override
+    public void setDayTimePerTick(float dayTimePerTick) {
+        this.dayTimePerTick = dayTimePerTick;
     }
 }
