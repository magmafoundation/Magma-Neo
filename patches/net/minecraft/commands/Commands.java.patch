--- a/net/minecraft/commands/Commands.java
+++ b/net/minecraft/commands/Commands.java
@@ -149,6 +_,7 @@
     private final CommandDispatcher<CommandSourceStack> dispatcher = new CommandDispatcher<>();
 
     public Commands(Commands.CommandSelection p_230943_, CommandBuildContext p_230944_) {
+        this(); // CraftBukkit
         AdvancementCommands.register(this.dispatcher);
         AttributeCommand.register(this.dispatcher, p_230944_);
         ExecuteCommand.register(this.dispatcher, p_230944_);
@@ -214,7 +_,7 @@
             JfrCommand.register(this.dispatcher);
         }
 
-        if (SharedConstants.IS_RUNNING_IN_IDE) {
+        if (net.neoforged.neoforge.gametest.GameTestHooks.isGametestEnabled()) {
             TestCommand.register(this.dispatcher);
             RaidCommand.register(this.dispatcher, p_230944_);
             DebugPathCommand.register(this.dispatcher);
@@ -249,6 +_,12 @@
             PublishCommand.register(this.dispatcher);
         }
 
+        net.neoforged.neoforge.event.EventHooks.onCommandRegister(this.dispatcher, p_230943_, p_230944_);
+        // CraftBukkit start
+    }
+
+    public Commands() {
+        // CraftBukkkit end
         this.dispatcher.setConsumer(ExecutionCommandSource.resultConsumer());
     }
 
@@ -258,15 +_,72 @@
         return new ParseResults<>(commandcontextbuilder1, p_242928_.getReader(), p_242928_.getExceptions());
     }
 
+    // CraftBukkit start
+    public void dispatchServerCommand(CommandSourceStack sender, String command) {
+        com.google.common.base.Joiner joiner = com.google.common.base.Joiner.on(" ");
+        if (command.startsWith("/")) {
+            command = command.substring(1);
+        }
+
+        org.bukkit.event.server.ServerCommandEvent event = new org.bukkit.event.server.ServerCommandEvent(sender.getBukkitSender(), command);
+        org.bukkit.Bukkit.getPluginManager().callEvent(event);
+        if (event.isCancelled()) {
+            return;
+        }
+        command = event.getCommand();
+
+        String[] args = command.split(" ");
+
+        String cmd = args[0];
+        if (cmd.startsWith("minecraft:")) cmd = cmd.substring("minecraft:".length());
+        if (cmd.startsWith("bukkit:")) cmd = cmd.substring("bukkit:".length());
+
+        // Block disallowed commands
+        if (cmd.equalsIgnoreCase("stop") || cmd.equalsIgnoreCase("kick") || cmd.equalsIgnoreCase("op")
+                || cmd.equalsIgnoreCase("deop") || cmd.equalsIgnoreCase("ban") || cmd.equalsIgnoreCase("ban-ip")
+                || cmd.equalsIgnoreCase("pardon") || cmd.equalsIgnoreCase("pardon-ip") || cmd.equalsIgnoreCase("reload")) {
+            return;
+        }
+
+        // Handle vanilla commands;
+        if (sender.getLevel().getCraftServer().getCommandBlockOverride(args[0])) {
+            args[0] = "minecraft:" + args[0];
+        }
+
+        String newCommand = joiner.join(args);
+        this.performPrefixedCommand(sender, newCommand, newCommand);
+    }
+    // CraftBukkit end
+
     public void performPrefixedCommand(CommandSourceStack p_230958_, String p_230959_) {
+        // CraftBukkit start
+        this.performPrefixedCommand(p_230958_, p_230959_, p_230959_);
+    }
+
+    public void performPrefixedCommand(CommandSourceStack p_230958_, String p_230959_, String label) {
         p_230959_ = p_230959_.startsWith("/") ? p_230959_.substring(1) : p_230959_;
-        this.performCommand(this.dispatcher.parse(p_230959_, p_230958_), p_230959_);
+        this.performCommand(this.dispatcher.parse(p_230959_, p_230958_), p_230959_, label);
+        // CraftBukkit end
     }
 
     public void performCommand(ParseResults<CommandSourceStack> p_242844_, String p_242841_) {
+        this.performCommand(p_242844_, p_242841_, p_242841_);
+    }
+
+    public void performCommand(ParseResults<CommandSourceStack> p_242844_, String p_242841_, String label) { // CraftBukkit
         CommandSourceStack commandsourcestack = p_242844_.getContext().getSource();
+        net.neoforged.neoforge.event.CommandEvent event = new net.neoforged.neoforge.event.CommandEvent(p_242844_);
+        if (net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(event).isCanceled()) {
+            if (event.getException() != null) {
+                commandsourcestack.sendFailure(Component.literal(Util.describeError(event.getException())));
+                LOGGER.error("'/{}' threw an exception", p_242841_, event.getException());
+            }
+            return;
+        }
+        p_242844_ = event.getParseResults();
+
         commandsourcestack.getServer().getProfiler().push(() -> "/" + p_242841_);
-        ContextChain<CommandSourceStack> contextchain = finishParsing(p_242844_, p_242841_, commandsourcestack);
+        ContextChain<CommandSourceStack> contextchain = finishParsing(p_242844_, p_242841_, commandsourcestack, label); // CraftBukkit
 
         try {
             if (contextchain != null) {
@@ -307,7 +_,7 @@
     }
 
     @Nullable
-    private static ContextChain<CommandSourceStack> finishParsing(ParseResults<CommandSourceStack> p_307220_, String p_307311_, CommandSourceStack p_307676_) {
+    private static ContextChain<CommandSourceStack> finishParsing(ParseResults<CommandSourceStack> p_307220_, String p_307311_, CommandSourceStack p_307676_, String label) { // CraftBukkit
         try {
             validateParseResults(p_307220_);
             return ContextChain.tryFlatten(p_307220_.getContext().build(p_307311_))
@@ -318,7 +_,7 @@
                 int i = Math.min(commandsyntaxexception.getInput().length(), commandsyntaxexception.getCursor());
                 MutableComponent mutablecomponent = Component.empty()
                     .withStyle(ChatFormatting.GRAY)
-                    .withStyle(p_82134_ -> p_82134_.withClickEvent(new ClickEvent(ClickEvent.Action.SUGGEST_COMMAND, "/" + p_307311_)));
+                    .withStyle(p_82134_ -> p_82134_.withClickEvent(new ClickEvent(ClickEvent.Action.SUGGEST_COMMAND, label))); // CraftBukkit
                 if (i > 10) {
                     mutablecomponent.append(CommonComponents.ELLIPSIS);
                 }
@@ -359,10 +_,36 @@
     }
 
     public void sendCommands(ServerPlayer p_82096_) {
-        Map<CommandNode<CommandSourceStack>, CommandNode<SharedSuggestionProvider>> map = Maps.newHashMap();
+        // CraftBukkit start
+        // Register Vanilla commands into builtRoot as before
+        Map<CommandNode<CommandSourceStack>, CommandNode<SharedSuggestionProvider>> map = Maps.newIdentityHashMap(); // Use identity to prevent aliasing issues
+        RootCommandNode vanillaRoot = new RootCommandNode();
+
+        RootCommandNode<CommandSourceStack> vanilla = p_82096_.server.vanillaCommandDispatcher.getDispatcher().getRoot();
+        map.put(vanilla, vanillaRoot);
+        this.fillUsableCommands(vanilla, vanillaRoot, p_82096_.createCommandSourceStack(), (Map) map);
+
+        // Now build the global commands in a second pass
         RootCommandNode<SharedSuggestionProvider> rootcommandnode = new RootCommandNode<>();
         map.put(this.dispatcher.getRoot(), rootcommandnode);
-        this.fillUsableCommands(this.dispatcher.getRoot(), rootcommandnode, p_82096_.createCommandSourceStack(), map);
+        // FORGE: Use our own command node merging method to handle redirect nodes properly, see issue #7551
+        net.neoforged.neoforge.server.command.CommandHelper.mergeCommandNode(this.dispatcher.getRoot(), rootcommandnode, map, p_82096_.createCommandSourceStack(), ctx -> 0, suggest -> SuggestionProviders.safelySwap((com.mojang.brigadier.suggestion.SuggestionProvider<SharedSuggestionProvider>) (com.mojang.brigadier.suggestion.SuggestionProvider<?>) suggest));
+
+        Collection<String> bukkit = new java.util.LinkedHashSet<>();
+        for (CommandNode node : rootcommandnode.getChildren()) {
+            bukkit.add(node.getName());
+        }
+
+        org.bukkit.event.player.PlayerCommandSendEvent event = new org.bukkit.event.player.PlayerCommandSendEvent(p_82096_.getBukkitEntity(), new java.util.LinkedHashSet<>(bukkit));
+        event.getPlayer().getServer().getPluginManager().callEvent(event);
+        // Remove labels that were removed during the event
+        for (String orig : bukkit) {
+            if (!event.getCommands().contains(orig)) {
+                // rootcommandnode.removeCommand(orig); Magma: todo create a patched version of brigadier that supports this
+            }
+        }
+        // CraftBukkit end
+
         p_82096_.connection.send(new ClientboundCommandsPacket(rootcommandnode));
     }
 
