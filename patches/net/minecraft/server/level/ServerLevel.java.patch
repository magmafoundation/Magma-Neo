--- a/net/minecraft/server/level/ServerLevel.java
+++ b/net/minecraft/server/level/ServerLevel.java
@@ -178,7 +_,7 @@
     final List<ServerPlayer> players = Lists.newArrayList();
     private final ServerChunkCache chunkSource;
     private final MinecraftServer server;
-    public final ServerLevelData serverLevelData;
+    public final net.minecraft.world.level.storage.PrimaryLevelData serverLevelData; // CraftBukkit - type
     private int lastSpawnChunkRadius;
     final EntityTickList entityTickList = new EntityTickList();
     public final PersistentEntitySectionManager<Entity> entityManager;
@@ -199,12 +_,25 @@
     private final List<CustomSpawner> customSpawners;
     @Nullable
     private EndDragonFight dragonFight;
-    final Int2ObjectMap<EnderDragonPart> dragonParts = new Int2ObjectOpenHashMap<>();
+    final Int2ObjectMap<net.neoforged.neoforge.entity.PartEntity<?>> dragonParts = new Int2ObjectOpenHashMap<>();
     private final StructureManager structureManager;
     private final StructureCheck structureCheck;
     private final boolean tickTime;
     private final RandomSequences randomSequences;
 
+    // CraftBukkit start
+    public final LevelStorageSource.LevelStorageAccess convertable;
+    public final UUID uuid;
+
+    public LevelChunk getChunkIfLoaded(int x, int z) {
+        return this.chunkSource.getChunk(x, z, false);
+    }
+
+    @Override
+    public ResourceKey<LevelStem> getTypeKey() {
+        return convertable.dimensionType;
+    }
+
     public ServerLevel(
         MinecraftServer p_214999_,
         Executor p_215000_,
@@ -230,11 +_,30 @@
             p_215007_,
             p_214999_.getMaxChainedNeighborUpdates()
         );
+        // CraftBukkit start
+        this.pvpMode = p_214999_.isPvpAllowed();
+        convertable = p_215001_;
+        uuid = org.bukkit.craftbukkit.util.WorldUUID.getUUID(p_215001_.levelDirectory.path().toFile());
+        // CraftBukkit end
         this.tickTime = p_215009_;
         this.server = p_214999_;
         this.customSpawners = p_215008_;
-        this.serverLevelData = p_215002_;
+        this.serverLevelData = (net.minecraft.world.level.storage.PrimaryLevelData) p_215002_;
         ChunkGenerator chunkgenerator = p_215004_.generator();
+        // CraftBukkit start
+        serverLevelData.setWorld(this);
+        if (biomeProvider != null) {
+            net.minecraft.world.level.biome.BiomeSource worldChunkManager = new org.bukkit.craftbukkit.generator.CustomWorldChunkManager(getWorld(), biomeProvider, server.registryAccess().registryOrThrow(Registries.BIOME));
+            if (chunkgenerator instanceof net.minecraft.world.level.levelgen.NoiseBasedChunkGenerator cga) {
+                chunkgenerator = new net.minecraft.world.level.levelgen.NoiseBasedChunkGenerator(worldChunkManager, cga.settings);
+            } else if (chunkgenerator instanceof net.minecraft.world.level.levelgen.FlatLevelSource cpf) {
+                chunkgenerator = new net.minecraft.world.level.levelgen.FlatLevelSource(cpf.settings(), worldChunkManager);
+            }
+        }
+        if (generator != null) {
+            chunkgenerator = new org.bukkit.craftbukkit.generator.CustomChunkGenerator(this, chunkgenerator, generator);
+        }
+        // CraftBukkit end
         boolean flag = p_214999_.forceSynchronousWrites();
         DataFixer datafixer = p_214999_.getFixerUpper();
         EntityPersistentStorage<Entity> entitypersistentstorage = new EntityStorage(
@@ -298,6 +_,8 @@
         this.randomSequences = Objects.requireNonNullElseGet(
             p_288977_, () -> this.getDataStorage().computeIfAbsent(RandomSequences.factory(i), "random_sequences")
         );
+
+        net.neoforged.neoforge.attachment.LevelAttachmentsSavedData.init(this);
     }
 
     @Deprecated
@@ -342,7 +_,7 @@
         if (this.sleepStatus.areEnoughSleeping(i) && this.sleepStatus.areEnoughDeepSleeping(i, this.players)) {
             if (this.getGameRules().getBoolean(GameRules.RULE_DAYLIGHT)) {
                 long j = this.levelData.getDayTime() + 24000L;
-                this.setDayTime(j - j % 24000L);
+                this.setDayTime(net.neoforged.neoforge.event.EventHooks.onSleepFinished(this, j - j % 24000L, this.getDayTime()));
             }
 
             this.wakeUpAllPlayers();
@@ -380,7 +_,7 @@
 
         this.handlingTick = false;
         profilerfiller.pop();
-        boolean flag1 = !this.players.isEmpty() || !this.getForcedChunks().isEmpty();
+        boolean flag1 = !this.players.isEmpty() || net.neoforged.neoforge.common.world.chunk.ForcedChunkManager.hasForcedChunks(this); // Neo: Replace vanilla's has forced chunk check with neo's that checks both the vanilla and neo added ones
         if (flag1) {
             this.resetEmptyTime();
         }
@@ -412,7 +_,9 @@
                             }
 
                             profilerfiller.push("tick");
-                            this.guardEntityTick(this::tickNonPassenger, p_308566_);
+                            if (!p_308566_.isRemoved() && !(p_308566_ instanceof net.neoforged.neoforge.entity.PartEntity)) {
+                                this.guardEntityTick(this::tickNonPassenger, p_308566_);
+                            }
                             profilerfiller.pop();
                         }
                     }
@@ -542,6 +_,7 @@
         BlockPos blockpos = this.getHeightmapPos(Heightmap.Types.MOTION_BLOCKING, p_295060_);
         BlockPos blockpos1 = blockpos.below();
         Biome biome = this.getBiome(blockpos).value();
+        if (this.isAreaLoaded(blockpos1, 1)) // Forge: check area to avoid loading neighbors in unloaded chunks
         if (biome.shouldFreeze(this, blockpos1)) {
             this.setBlockAndUpdate(blockpos1, Blocks.ICE.defaultBlockState());
         }
@@ -714,15 +_,19 @@
                 .broadcastAll(new ClientboundGameEventPacket(ClientboundGameEventPacket.THUNDER_LEVEL_CHANGE, this.thunderLevel), this.dimension());
         }
 
+        /* The function in use here has been replaced in order to only send the weather info to players in the correct dimension,
+         * rather than to all players on the server. This is what causes the client-side rain, as the
+         * client believes that it has started raining locally, rather than in another dimension.
+         */
         if (flag != this.isRaining()) {
             if (flag) {
-                this.server.getPlayerList().broadcastAll(new ClientboundGameEventPacket(ClientboundGameEventPacket.STOP_RAINING, 0.0F));
+                this.server.getPlayerList().broadcastAll(new ClientboundGameEventPacket(ClientboundGameEventPacket.STOP_RAINING, 0.0F), this.dimension());
             } else {
-                this.server.getPlayerList().broadcastAll(new ClientboundGameEventPacket(ClientboundGameEventPacket.START_RAINING, 0.0F));
+                this.server.getPlayerList().broadcastAll(new ClientboundGameEventPacket(ClientboundGameEventPacket.START_RAINING, 0.0F), this.dimension());
             }
 
-            this.server.getPlayerList().broadcastAll(new ClientboundGameEventPacket(ClientboundGameEventPacket.RAIN_LEVEL_CHANGE, this.rainLevel));
-            this.server.getPlayerList().broadcastAll(new ClientboundGameEventPacket(ClientboundGameEventPacket.THUNDER_LEVEL_CHANGE, this.thunderLevel));
+            this.server.getPlayerList().broadcastAll(new ClientboundGameEventPacket(ClientboundGameEventPacket.RAIN_LEVEL_CHANGE, this.rainLevel), this.dimension());
+            this.server.getPlayerList().broadcastAll(new ClientboundGameEventPacket(ClientboundGameEventPacket.THUNDER_LEVEL_CHANGE, this.thunderLevel), this.dimension());
         }
     }
 
@@ -758,7 +_,11 @@
         p_8648_.tickCount++;
         this.getProfiler().push(() -> BuiltInRegistries.ENTITY_TYPE.getKey(p_8648_.getType()).toString());
         profilerfiller.incrementCounter("tickNonPassenger");
-        p_8648_.tick();
+        // Neo: Permit cancellation of Entity#tick via EntityTickEvent.Pre
+        if (!net.neoforged.neoforge.event.EventHooks.fireEntityTickPre(p_8648_).isCanceled()) {
+            p_8648_.tick();
+            net.neoforged.neoforge.event.EventHooks.fireEntityTickPost(p_8648_);
+        }
         this.getProfiler().pop();
 
         for (Entity entity : p_8648_.getPassengers()) {
@@ -807,6 +_,7 @@
             } else {
                 this.entityManager.autoSave();
             }
+            net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.event.level.LevelEvent.Save(this));
         }
     }
 
@@ -872,18 +_,40 @@
 
     @Override
     public boolean addFreshEntity(Entity p_8837_) {
-        return this.addEntity(p_8837_);
+        // CraftBukkit start
+        return this.addFreshEntity(p_8837_, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.DEFAULT);
+    }
+
+    @Override
+    public boolean addFreshEntity(Entity entity, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason reason) {
+        return this.addEntity(entity, reason);
+        // CraftBukkit end
     }
 
     public boolean addWithUUID(Entity p_8848_) {
-        return this.addEntity(p_8848_);
+        // CraftBukkit start
+        return this.addWithUUID(p_8848_, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.DEFAULT);
+    }
+
+    public boolean addWithUUID(Entity p_8848_, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason reason) {
+        return this.addEntity(p_8848_, reason);
+        // CraftBukkit end
     }
 
     public void addDuringTeleport(Entity p_143335_) {
+        // CraftBukkit start
+        // SPIGOT-6415: Don't call spawn event for entities which travel trough worlds,
+        // since it is only an implementation detail, that a new entity is created when
+        // they are traveling between worlds.
+        this.addDuringTeleport(p_143335_, null);
+    }
+
+    public void addDuringTeleport(Entity p_143335_, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason reason) {
+        // CraftBukkit end
         if (p_143335_ instanceof ServerPlayer serverplayer) {
             this.addPlayer(serverplayer);
         } else {
-            this.addEntity(p_143335_);
+            this.addEntity(p_143335_, reason); // CraftBukkit
         }
     }
 
@@ -896,6 +_,7 @@
     }
 
     private void addPlayer(ServerPlayer p_8854_) {
+        if (net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.event.entity.EntityJoinLevelEvent(p_8854_, this)).isCanceled()) return;
         Entity entity = this.getEntities().get(p_8854_.getUUID());
         if (entity != null) {
             LOGGER.warn("Force-added player with duplicate UUID {}", p_8854_.getUUID());
@@ -903,23 +_,42 @@
             this.removePlayerImmediately((ServerPlayer)entity, Entity.RemovalReason.DISCARDED);
         }
 
-        this.entityManager.addNewEntity(p_8854_);
+        this.entityManager.addNewEntityWithoutEvent(p_8854_);
+        p_8854_.onAddedToLevel();
     }
 
-    private boolean addEntity(Entity p_8873_) {
+    // CraftBukkit start
+    private boolean addEntity(Entity p_8873_, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason spawnReason) {
         if (p_8873_.isRemoved()) {
-            LOGGER.warn("Tried to add entity {} but it was marked as removed already", EntityType.getKey(p_8873_.getType()));
+            // LOGGER.warn("Tried to add entity {} but it was marked as removed already", EntityType.getKey(p_8873_.getType())); // CraftBukkit
             return false;
         } else {
-            return this.entityManager.addNewEntity(p_8873_);
+            // SPIGOT-6415: Don't call spawn event when reason is null. For example when an entity teleports to a new world.
+            if (spawnReason != null && !org.bukkit.craftbukkit.event.CraftEventFactory.doEntityAddEventCalling(this, p_8873_, spawnReason)) {
+                return false;
+            }
+            // CraftBukkit end
+
+            if (this.entityManager.addNewEntity(p_8873_)) {
+                p_8873_.onAddedToLevel();
+                return true;
+            } else {
+                return false;
+            }
         }
     }
 
     public boolean tryAddFreshEntityWithPassengers(Entity p_8861_) {
+        // CraftBukkit start
+        return this.tryAddFreshEntityWithPassengers(p_8861_, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.DEFAULT);
+    }
+
+    public boolean tryAddFreshEntityWithPassengers(Entity p_8861_, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason reason) {
+        // CraftBukkit end
         if (p_8861_.getSelfAndPassengers().map(Entity::getUUID).anyMatch(this.entityManager::isLoaded)) {
             return false;
         } else {
-            this.addFreshEntityWithPassengers(p_8861_);
+            this.addFreshEntityWithPassengers(p_8861_, reason); // CraftBukkit
             return true;
         }
     }
@@ -933,6 +_,20 @@
         p_143262_.remove(p_143263_);
     }
 
+    // CraftBukkit start
+    public boolean strikeLightning(Entity entitylightning) {
+        return this.strikeLightning(entitylightning, org.bukkit.event.weather.LightningStrikeEvent.Cause.UNKNOWN);
+    }
+
+    public boolean strikeLightning(Entity entitylightning, org.bukkit.event.weather.LightningStrikeEvent.Cause cause) {
+        org.bukkit.event.weather.LightningStrikeEvent lightning = org.bukkit.craftbukkit.event.CraftEventFactory.callLightningStrikeEvent((org.bukkit.entity.LightningStrike) entitylightning.getBukkitEntity(), cause);
+        if (lightning.isCancelled()) {
+            return false;
+        }
+        return this.addFreshEntity(entitylightning);
+    }
+    // CraftBukkit end
+
     @Override
     public void destroyBlockProgress(int p_8612_, BlockPos p_8613_, int p_8614_) {
         for (ServerPlayer serverplayer : this.server.getPlayerList().getPlayers()) {
@@ -959,6 +_,12 @@
         float p_263390_,
         long p_263403_
     ) {
+        net.neoforged.neoforge.event.PlayLevelSoundEvent.AtPosition event = net.neoforged.neoforge.event.EventHooks.onPlaySoundAtPosition(this, p_263393_, p_263369_, p_263354_, p_263412_, p_263338_, p_263352_, p_263390_);
+        if (event.isCanceled() || event.getSound() == null) return;
+        p_263412_ = event.getSound();
+        p_263338_ = event.getSource();
+        p_263352_ = event.getNewVolume();
+        p_263390_ = event.getNewPitch();
         this.server
             .getPlayerList()
             .broadcast(
@@ -976,6 +_,12 @@
     public void playSeededSound(
         @Nullable Player p_263545_, Entity p_263544_, Holder<SoundEvent> p_263491_, SoundSource p_263542_, float p_263530_, float p_263520_, long p_263490_
     ) {
+        net.neoforged.neoforge.event.PlayLevelSoundEvent.AtEntity event = net.neoforged.neoforge.event.EventHooks.onPlaySoundAtEntity(p_263544_, p_263491_, p_263542_, p_263530_, p_263520_);
+        if (event.isCanceled() || event.getSound() == null) return;
+        p_263491_ = event.getSound();
+        p_263542_ = event.getSource();
+        p_263530_ = event.getNewVolume();
+        p_263520_ = event.getNewPitch();
         this.server
             .getPlayerList()
             .broadcast(
@@ -1019,6 +_,7 @@
 
     @Override
     public void gameEvent(Holder<GameEvent> p_316597_, Vec3 p_215042_, GameEvent.Context p_215043_) {
+        if (!net.neoforged.neoforge.common.CommonHooks.onVanillaGameEvent(this, p_316597_, p_215042_, p_215043_)) return;
         this.gameEventDispatcher.post(p_316597_, p_215042_, p_215043_);
     }
 
@@ -1057,11 +_,16 @@
 
     @Override
     public void updateNeighborsAt(BlockPos p_215045_, Block p_215046_) {
+        net.neoforged.neoforge.event.EventHooks.onNeighborNotify(this, p_215045_, this.getBlockState(p_215045_), java.util.EnumSet.allOf(Direction.class), false).isCanceled();
         this.neighborUpdater.updateNeighborsAtExceptFromFacing(p_215045_, p_215046_, null);
     }
 
     @Override
     public void updateNeighborsAtExceptFromFacing(BlockPos p_215052_, Block p_215053_, Direction p_215054_) {
+        java.util.EnumSet<Direction> directions = java.util.EnumSet.allOf(Direction.class);
+        directions.remove(p_215054_);
+        if (net.neoforged.neoforge.event.EventHooks.onNeighborNotify(this, p_215052_, this.getBlockState(p_215052_), directions, false).isCanceled())
+            return;
         this.neighborUpdater.updateNeighborsAtExceptFromFacing(p_215052_, p_215053_, p_215054_);
     }
 
@@ -1196,14 +_,19 @@
     public <T extends ParticleOptions> int sendParticles(
         T p_8768_, double p_8769_, double p_8770_, double p_8771_, int p_8772_, double p_8773_, double p_8774_, double p_8775_, double p_8776_
     ) {
-        ClientboundLevelParticlesPacket clientboundlevelparticlespacket = new ClientboundLevelParticlesPacket(
-            p_8768_, false, p_8769_, p_8770_, p_8771_, (float)p_8773_, (float)p_8774_, (float)p_8775_, (float)p_8776_, p_8772_
-        );
+        // CraftBukkit - visibility api support
+        return sendParticles(null, p_8768_, p_8769_, p_8770_, p_8771_, p_8772_, p_8773_, p_8774_, p_8775_, p_8776_, false);
+    }
+
+    public <T extends ParticleOptions> int sendParticles(ServerPlayer sender, T p_8768_, double p_8769_, double p_8770_, double p_8771_, int p_8772_, double p_8773_, double p_8774_, double p_8775_, double p_8776_, boolean force) {
+        ClientboundLevelParticlesPacket clientboundlevelparticlespacket = new ClientboundLevelParticlesPacket( p_8768_, force, p_8769_, p_8770_, p_8771_, (float)p_8773_, (float)p_8774_, (float)p_8775_, (float)p_8776_, p_8772_);
+        // CraftBukkit end
         int i = 0;
 
         for (int j = 0; j < this.players.size(); j++) {
             ServerPlayer serverplayer = this.players.get(j);
-            if (this.sendParticles(serverplayer, false, p_8769_, p_8770_, p_8771_, clientboundlevelparticlespacket)) {
+            if (sender != null && !serverplayer.getBukkitEntity().canSee(sender.getBukkitEntity())) continue; // CraftBukkit
+            if (this.sendParticles(serverplayer, force, p_8769_, p_8770_, p_8771_, clientboundlevelparticlespacket)) { // CraftBukkit
                 i++;
             }
         }
@@ -1713,8 +_,8 @@
                 ServerLevel.this.navigatingMobs.add(mob);
             }
 
-            if (p_143371_ instanceof EnderDragon enderdragon) {
-                for (EnderDragonPart enderdragonpart : enderdragon.getSubEntities()) {
+            if (p_143371_.isMultipartEntity()) {
+                for(net.neoforged.neoforge.entity.PartEntity<?> enderdragonpart : p_143371_.getParts()) {
                     ServerLevel.this.dragonParts.put(enderdragonpart.getId(), enderdragonpart);
                 }
             }
@@ -1733,24 +_,61 @@
                 if (ServerLevel.this.isUpdatingNavigations) {
                     String s = "onTrackingStart called during navigation iteration";
                     Util.logAndPauseIfInIde(
-                        "onTrackingStart called during navigation iteration", new IllegalStateException("onTrackingStart called during navigation iteration")
+                              "onTrackingStart called during navigation iteration", new IllegalStateException("onTrackingStart called during navigation iteration")
                     );
                 }
 
                 ServerLevel.this.navigatingMobs.remove(mob);
             }
 
-            if (p_143375_ instanceof EnderDragon enderdragon) {
-                for (EnderDragonPart enderdragonpart : enderdragon.getSubEntities()) {
+            if (p_143375_.isMultipartEntity()) {
+                for(net.neoforged.neoforge.entity.PartEntity<?> enderdragonpart : p_143375_.getParts()) {
                     ServerLevel.this.dragonParts.remove(enderdragonpart.getId());
                 }
             }
 
             p_143375_.updateDynamicGameEventListener(DynamicGameEventListener::remove);
+
+            p_143375_.onRemovedFromLevel();
+            net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.event.entity.EntityLeaveLevelEvent(p_143375_, ServerLevel.this));
         }
 
         public void onSectionChange(Entity p_215086_) {
             p_215086_.updateDynamicGameEventListener(DynamicGameEventListener::move);
         }
+    }
+
+    @Override
+    public java.util.Collection<net.neoforged.neoforge.entity.PartEntity<?>> getPartEntities() {
+        return this.dragonParts.values();
+    }
+
+    private final net.neoforged.neoforge.capabilities.CapabilityListenerHolder capListenerHolder = new net.neoforged.neoforge.capabilities.CapabilityListenerHolder();
+
+    @Override
+    public void invalidateCapabilities(BlockPos pos) {
+        capListenerHolder.invalidatePos(pos);
+    }
+
+    @Override
+    public void invalidateCapabilities(ChunkPos pos) {
+        capListenerHolder.invalidateChunk(pos);
+    }
+
+    /**
+     * Register a listener for capability invalidation.
+     * @see net.neoforged.neoforge.capabilities.ICapabilityInvalidationListener
+     */
+    public void registerCapabilityListener(BlockPos pos, net.neoforged.neoforge.capabilities.ICapabilityInvalidationListener listener) {
+        capListenerHolder.addListener(pos, listener);
+    }
+
+    /**
+     * Internal method, used to clean capability listeners that are not referenced.
+     * Do not call.
+     */
+    @org.jetbrains.annotations.ApiStatus.Internal
+    public void cleanCapabilityListenerReferences() {
+        capListenerHolder.clean();
     }
 }
