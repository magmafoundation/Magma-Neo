--- a/net/minecraft/server/level/ServerChunkCache.java
+++ b/net/minecraft/server/level/ServerChunkCache.java
@@ -45,7 +_,7 @@
 import net.minecraft.world.level.storage.DimensionDataStorage;
 import net.minecraft.world.level.storage.LevelStorageSource;
 
-public class ServerChunkCache extends ChunkSource {
+public class ServerChunkCache extends ChunkSource implements net.neoforged.neoforge.common.extensions.IServerChunkCacheExtension {
     private static final List<ChunkStatus> CHUNK_STATUSES = ChunkStatus.getStatusList();
     public final DistanceManager distanceManager;
     public final ServerLevel level;
@@ -106,6 +_,16 @@
         this.clearCache();
     }
 
+    // CraftBukkit start - properly implement isChunkLoaded
+    public boolean isChunkLoaded(int chunkX, int chunkZ) {
+        ChunkHolder chunk = this.chunkMap.getUpdatingChunkIfPresent(ChunkPos.asLong(chunkX, chunkZ));
+        if (chunk == null) {
+            return false;
+        }
+        return chunk.getFullChunkNow() != null;
+    }
+    // CraftBukkit end
+
     public ThreadedLevelLightEngine getLightEngine() {
         return this.lightEngine;
     }
@@ -150,6 +_,10 @@
                 }
             }
 
+            ChunkHolder chunkholder = this.getVisibleChunkIfPresent(i);
+            if (chunkholder != null && chunkholder.currentlyLoading != null)
+                return chunkholder.currentlyLoading; // Neo: If the requested chunk is loading, bypass the future chain to prevent a deadlock.
+
             profilerfiller.incrementCounter("getChunkCacheMiss");
             CompletableFuture<ChunkResult<ChunkAccess>> completablefuture = this.getChunkFutureMainThread(p_8360_, p_8361_, p_330876_, p_8363_);
             this.mainThreadProcessor.managedBlock(completablefuture::isDone);
@@ -184,6 +_,7 @@
             if (chunkholder == null) {
                 return null;
             } else {
+                if (chunkholder.currentlyLoading != null) return chunkholder.currentlyLoading; // Forge: If the requested chunk is loading, bypass the future chain to prevent a deadlock.
                 ChunkAccess chunkaccess1 = chunkholder.getChunkIfPresent(ChunkStatus.FULL);
                 if (chunkaccess1 != null) {
                     this.storeInCache(i, chunkaccess1, ChunkStatus.FULL);
@@ -298,11 +_,31 @@
 
     @Override
     public void close() throws IOException {
-        this.save(true);
+        // CraftBukkit start
+        close(true);
+    }
+
+    public void close(boolean save) throws IOException {
+        if (save) {
+            this.save(true);
+        }
+        // CraftBukkit end
         this.lightEngine.close();
         this.chunkMap.close();
     }
 
+    // CraftBukkit start - modelled on below
+    public void purgeUnload() {
+        this.level.getProfiler().push("purge");
+        this.distanceManager.purgeStaleTickets();
+        this.runDistanceManagerUpdates();
+        this.level.getProfiler().popPush("unload");
+        this.chunkMap.tick(() -> true);
+        this.level.getProfiler().pop();
+        this.clearCache();
+    }
+    // CraftBukkit end
+
     @Override
     public void tick(BooleanSupplier p_201913_, boolean p_201914_) {
         this.level.getProfiler().push("purge");
@@ -356,7 +_,7 @@
                 for (ServerChunkCache.ChunkAndHolder serverchunkcache$chunkandholder : list) {
                     LevelChunk levelchunk1 = serverchunkcache$chunkandholder.chunk;
                     ChunkPos chunkpos = levelchunk1.getPos();
-                    if (this.level.isNaturalSpawningAllowed(chunkpos) && this.chunkMap.anyPlayerCloseEnoughForSpawning(chunkpos)) {
+                    if ((this.level.isNaturalSpawningAllowed(chunkpos) && this.chunkMap.anyPlayerCloseEnoughForSpawning(chunkpos)) || this.distanceManager.shouldForceTicks(chunkpos.toLong())) {
                         levelchunk1.incrementInhabitedTime(j);
                         if (flag1 && (this.spawnEnemies || this.spawnFriendlies) && this.level.getWorldBorder().isWithinBounds(chunkpos)) {
                             NaturalSpawner.spawnForChunk(this.level, levelchunk1, naturalspawner$spawnstate, this.spawnFriendlies, this.spawnEnemies, flag);
@@ -435,11 +_,17 @@
     }
 
     public <T> void addRegionTicket(TicketType<T> p_8388_, ChunkPos p_8389_, int p_8390_, T p_8391_) {
-        this.distanceManager.addRegionTicket(p_8388_, p_8389_, p_8390_, p_8391_);
+        addRegionTicket(p_8388_, p_8389_, p_8390_, p_8391_, false);
+    }
+    public <T> void addRegionTicket(TicketType<T> p_8388_, ChunkPos p_8389_, int p_8390_, T p_8391_, boolean forceTicks) {
+        this.distanceManager.addRegionTicket(p_8388_, p_8389_, p_8390_, p_8391_, forceTicks);
     }
 
     public <T> void removeRegionTicket(TicketType<T> p_8439_, ChunkPos p_8440_, int p_8441_, T p_8442_) {
-        this.distanceManager.removeRegionTicket(p_8439_, p_8440_, p_8441_, p_8442_);
+        removeRegionTicket(p_8439_, p_8440_, p_8441_, p_8442_, false);
+    }
+    public <T> void removeRegionTicket(TicketType<T> p_8439_, ChunkPos p_8440_, int p_8441_, T p_8442_, boolean forceTicks) {
+        this.distanceManager.removeRegionTicket(p_8439_, p_8440_, p_8441_, p_8442_, forceTicks);
     }
 
     @Override
