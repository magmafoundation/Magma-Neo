--- a/net/minecraft/server/ServerTickRateManager.java
+++ b/net/minecraft/server/ServerTickRateManager.java
@@ -58,8 +_,14 @@
     }
 
     public boolean stopSprinting() {
+        // CraftBukkit start, add sendLog parameter
+        return stopSprinting(true);
+    }
+
+    public boolean stopSprinting(boolean sendLog) {
+        // CraftBukkit end
         if (this.remainingSprintTicks > 0L) {
-            this.finishTickSprint();
+            this.finishTickSprint(sendLog); // CraftBukkit - add sendLog parameter
             return true;
         } else {
             return false;
@@ -76,14 +_,20 @@
         return flag;
     }
 
-    private void finishTickSprint() {
+    private void finishTickSprint(boolean sendLog) { // CraftBukkit - add sendLog parameter
         long i = this.scheduledCurrentSprintTicks - this.remainingSprintTicks;
         double d0 = Math.max(1.0, (double)this.sprintTimeSpend) / (double)TimeUtil.NANOSECONDS_PER_MILLISECOND;
         int j = (int)((double)(TimeUtil.MILLISECONDS_PER_SECOND * i) / d0);
         String s = String.format("%.2f", i == 0L ? (double)this.millisecondsPerTick() : d0 / (double)i);
         this.scheduledCurrentSprintTicks = 0L;
         this.sprintTimeSpend = 0L;
-        this.server.createCommandSourceStack().sendSuccess(() -> Component.translatable("commands.tick.sprint.report", j, s), true);
+        // CraftBukkit start - add sendLog parameter
+        if (sendLog) {
+            this.server.createCommandSourceStack().sendSuccess(() -> {
+                return Component.translatable("commands.tick.sprint.report", j, s);
+            }, true);
+        }
+        // CraftBukkit end
         this.remainingSprintTicks = 0L;
         this.setFrozen(this.previousIsFrozen);
         this.server.onTickRateChanged();
@@ -97,7 +_,7 @@
             this.remainingSprintTicks--;
             return true;
         } else {
-            this.finishTickSprint();
+            this.finishTickSprint(true); // CraftBukkit - add sendLog parameter
             return false;
         }
     }
