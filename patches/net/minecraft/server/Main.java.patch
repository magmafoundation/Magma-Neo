--- a/net/minecraft/server/Main.java
+++ b/net/minecraft/server/Main.java
@@ -64,7 +_,7 @@
     private static final Logger LOGGER = LogUtils.getLogger();
 
     @DontObfuscate
-    public static void main(String[] p_129699_) {
+    public static void main(String[] p_129699_) throws Exception {
         SharedConstants.tryDetectVersion();
         OptionParser optionparser = new OptionParser();
         OptionSpec<Void> optionspec = optionparser.accepts("nogui");
@@ -83,6 +_,34 @@
         OptionSpec<Void> optionspec13 = optionparser.accepts("jfrProfile");
         OptionSpec<Path> optionspec14 = optionparser.accepts("pidFile").withRequiredArg().withValuesConvertedBy(new PathConverter());
         OptionSpec<String> optionspec15 = optionparser.nonOptions();
+        optionparser.accepts("allowUpdates").withRequiredArg().ofType(Boolean.class).defaultsTo(Boolean.TRUE); // Forge: allow mod updates to proceed
+        optionparser.accepts("gameDir").withRequiredArg().ofType(File.class).defaultsTo(new File(".")); //Forge: Consume this argument, we use it in the launcher, and the client side.
+        final OptionSpec<net.minecraft.core.BlockPos> spawnPosOpt;
+        boolean gametestEnabled = Boolean.getBoolean("neoforge.gameTestServer");
+        if (gametestEnabled) {
+            spawnPosOpt = optionparser.accepts("spawnPos").withRequiredArg().withValuesConvertedBy(new net.neoforged.neoforge.gametest.BlockPosValueConverter()).defaultsTo(new net.minecraft.core.BlockPos(0, 60, 0));
+        } else {
+             spawnPosOpt = null;
+        }
+
+        // CraftBukkit
+        optionparser.acceptsAll(java.util.Arrays.asList("b", "bukkit-settings"), "File for bukkit settings")
+                .withRequiredArg()
+                .ofType(File.class)
+                .defaultsTo(new File("bukkit.yml"))
+                .describedAs("Yml file");
+
+        optionparser.acceptsAll(java.util.Arrays.asList("C", "commands-settings"), "File for command settings")
+                .withRequiredArg()
+                .ofType(File.class)
+                .defaultsTo(new File("commands.yml"))
+                .describedAs("Yml file");
+
+        optionparser.acceptsAll(java.util.Arrays.asList("P", "plugins"), "Plugin directory to use")
+                .withRequiredArg()
+                .ofType(File.class)
+                .defaultsTo(new File("plugins"))
+                .describedAs("Plugin directory");
 
         try {
             OptionSet optionset = optionparser.parse(p_129699_);
@@ -90,6 +_,13 @@
                 optionparser.printHelpOn(System.err);
                 return;
             }
+            Path path2 = Paths.get("eula.txt");
+            Eula eula = new Eula(path2);
+
+            if (!eula.hasAgreedToEULA()) {
+                LOGGER.info("You need to agree to the EULA in order to run the server. Go to eula.txt for more info.");
+                return;
+            }
 
             Path path = optionset.valueOf(optionspec14);
             if (path != null) {
@@ -105,32 +_,44 @@
             Bootstrap.validate();
             Util.startTimerHackThread();
             Path path1 = Paths.get("server.properties");
+            if (!optionset.has(optionspec1)) net.neoforged.neoforge.server.loading.ServerModLoader.load(); // Load mods before we load almost anything else anymore. Single spot now. Only loads if they haven't passed the initserver param
             DedicatedServerSettings dedicatedserversettings = new DedicatedServerSettings(path1);
             dedicatedserversettings.forceSave();
             RegionFileVersion.configure(dedicatedserversettings.getProperties().regionFileComression);
-            Path path2 = Paths.get("eula.txt");
-            Eula eula = new Eula(path2);
             if (optionset.has(optionspec1)) {
+                // CraftBukkit start - SPIGOT-5761: Create bukkit.yml and commands.yml if not present
+                File configFile = (File) optionset.valueOf("bukkit-settings");
+                org.bukkit.configuration.file.YamlConfiguration configuration = org.bukkit.configuration.file.YamlConfiguration.loadConfiguration(configFile);
+                configuration.options().copyDefaults(true);
+                configuration.setDefaults(org.bukkit.configuration.file.YamlConfiguration.loadConfiguration(new java.io.InputStreamReader(Main.class.getClassLoader().getResourceAsStream("configurations/bukkit.yml"), com.google.common.base.Charsets.UTF_8)));
+                configuration.save(configFile);
+
+                File commandFile = (File) optionset.valueOf("commands-settings");
+                org.bukkit.configuration.file.YamlConfiguration commandsConfiguration = org.bukkit.configuration.file.YamlConfiguration.loadConfiguration(commandFile);
+                commandsConfiguration.options().copyDefaults(true);
+                commandsConfiguration.setDefaults(org.bukkit.configuration.file.YamlConfiguration.loadConfiguration( new java.io.InputStreamReader(Main.class.getClassLoader().getResourceAsStream("configurations/commands.yml"), com.google.common.base.Charsets.UTF_8)));
+                commandsConfiguration.save(commandFile);
+                // CraftBukkit end
                 LOGGER.info("Initialized '{}' and '{}'", path1.toAbsolutePath(), path2.toAbsolutePath());
                 return;
             }
 
-            if (!eula.hasAgreedToEULA()) {
-                LOGGER.info("You need to agree to the EULA in order to run the server. Go to eula.txt for more info.");
-                return;
-            }
-
             File file1 = new File(optionset.valueOf(optionspec9));
             Services services = Services.create(new YggdrasilAuthenticationService(Proxy.NO_PROXY), file1);
             String s = Optional.ofNullable(optionset.valueOf(optionspec10)).orElse(dedicatedserversettings.getProperties().levelName);
+            if (s == null || s.isEmpty() || new File(file1, s).getAbsolutePath().equals(new File(s).getAbsolutePath())) {
+                LOGGER.error("Invalid world directory specified, must not be null, empty or the same directory as your universe! " + s);
+                return;
+            }
             LevelStorageSource levelstoragesource = LevelStorageSource.createDefault(file1.toPath());
-            LevelStorageSource.LevelStorageAccess levelstoragesource$levelstorageaccess = levelstoragesource.validateAndCreateAccess(s);
+            LevelStorageSource.LevelStorageAccess levelstoragesource$levelstorageaccess = levelstoragesource.validateAndCreateAccess(s, LevelStem.OVERWORLD);
             Dynamic<?> dynamic;
             if (levelstoragesource$levelstorageaccess.hasWorldData()) {
                 LevelSummary levelsummary;
                 try {
                     dynamic = levelstoragesource$levelstorageaccess.getDataTag();
                     levelsummary = levelstoragesource$levelstorageaccess.getSummary(dynamic);
+                    levelstoragesource$levelstorageaccess.readAdditionalLevelSaveData(false);
                 } catch (NbtException | ReportedNbtException | IOException ioexception1) {
                     LevelStorageSource.LevelDirectory levelstoragesource$leveldirectory = levelstoragesource$levelstorageaccess.getLevelDirectory();
                     LOGGER.warn("Failed to load world data from {}", levelstoragesource$leveldirectory.dataFile(), ioexception1);
@@ -139,6 +_,7 @@
                     try {
                         dynamic = levelstoragesource$levelstorageaccess.getDataTagFallback();
                         levelsummary = levelstoragesource$levelstorageaccess.getSummary(dynamic);
+                        levelstoragesource$levelstorageaccess.readAdditionalLevelSaveData(true);
                     } catch (NbtException | ReportedNbtException | IOException ioexception) {
                         LOGGER.error("Failed to load world data from {}", levelstoragesource$leveldirectory.oldDataFile(), ioexception);
                         LOGGER.error(
@@ -173,6 +_,25 @@
 
             PackRepository packrepository = ServerPacksSource.createPackRepository(levelstoragesource$levelstorageaccess);
 
+            // CraftBukkit start
+            File bukkitDataPackFolder = new File(levelstoragesource$levelstorageaccess.getLevelPath(net.minecraft.world.level.storage.LevelResource.DATAPACK_DIR).toFile(), "bukkit");
+            if (!bukkitDataPackFolder.exists()) {
+                bukkitDataPackFolder.mkdirs();
+            }
+            File mcMeta = new File(bukkitDataPackFolder, "pack.mcmeta");
+            try {
+                com.google.common.io.Files.write("{\n"
+                        + "    \"pack\": {\n"
+                        + "        \"description\": \"Data pack for resources provided by Bukkit plugins\",\n"
+                        + "        \"pack_format\": " + SharedConstants.getCurrentVersion().getPackVersion(net.minecraft.server.packs.PackType.SERVER_DATA) + "\n"
+                        + "    }\n"
+                        + "}\n", mcMeta, com.google.common.base.Charsets.UTF_8);
+            } catch (java.io.IOException ex) {
+                throw new RuntimeException("Could not initialize Bukkit datapack", ex);
+            }
+            java.util.concurrent.atomic.AtomicReference<net.minecraft.server.WorldLoader.DataLoadContext> worldLoader = new java.util.concurrent.atomic.AtomicReference<>();
+            // CraftBukkit end
+
             WorldStem worldstem;
             try {
                 WorldLoader.InitConfig worldloader$initconfig = loadOrCreateConfig(dedicatedserversettings.getProperties(), dynamic1, flag, packrepository);
@@ -180,6 +_,7 @@
                         p_248086_ -> WorldLoader.load(
                                 worldloader$initconfig,
                                 p_307161_ -> {
+                                    worldLoader.set(p_307161_); // CraftBukkit
                                     Registry<LevelStem> registry = p_307161_.datapackDimensions().registryOrThrow(Registries.LEVEL_STEM);
                                     if (dynamic1 != null) {
                                         LevelDataAndDimensions leveldataanddimensions = LevelStorageSource.getLevelDataAndDimensions(
@@ -214,6 +_,9 @@
                                             worlddimensions = dedicatedserverproperties.createDimensions(p_307161_.datapackWorldgen());
                                         }
 
+                                        // Neo: Do a write-read-cycle to inject modded dimensions on first start of a dedicated server into its generated world dimensions list.
+                                        var registryOps = net.minecraft.resources.RegistryOps.create(net.minecraft.nbt.NbtOps.INSTANCE, p_307161_.datapackWorldgen());
+                                        worlddimensions = WorldDimensions.CODEC.encoder().encodeStart(registryOps, worlddimensions).flatMap((writtenPayloadWithModdedDimensions) -> WorldDimensions.CODEC.decoder().parse(registryOps, writtenPayloadWithModdedDimensions)).resultOrPartial(LOGGER::error).orElse(worlddimensions);
                                         WorldDimensions.Complete worlddimensions$complete = worlddimensions.bake(registry);
                                         Lifecycle lifecycle = worlddimensions$complete.lifecycle().add(p_307161_.datapackWorldgen().allRegistriesLifecycle());
                                         return new WorldLoader.DataLoadOutput<>(
@@ -246,24 +_,24 @@
 
             WorldData worlddata = worldstem.worldData();
             levelstoragesource$levelstorageaccess.saveDataTag(registryaccess$frozen, worlddata);
-            final DedicatedServer dedicatedserver = MinecraftServer.spin(
+            final MinecraftServer dedicatedserver = MinecraftServer.spin(
                 p_293760_ -> {
-                    DedicatedServer dedicatedserver1 = new DedicatedServer(
-                        p_293760_,
-                        levelstoragesource$levelstorageaccess,
-                        packrepository,
-                        worldstem,
-                        dedicatedserversettings,
-                        DataFixers.getDataFixer(),
-                        services,
-                        LoggerChunkProgressListener::createFromGameruleRadius
-                    );
+                    MinecraftServer dedicatedserver1;
+                    if (gametestEnabled) {
+                        net.neoforged.neoforge.gametest.GameTestHooks.registerGametests();
+                        net.minecraft.core.BlockPos spawnPos = optionset.valueOf(spawnPosOpt);
+                        dedicatedserver1 = net.minecraft.gametest.framework.GameTestServer.create(p_293760_, levelstoragesource$levelstorageaccess, packrepository, net.minecraft.gametest.framework.GameTestRegistry.getAllTestFunctions(), spawnPos);
+                    } else {
+                        dedicatedserver1 = new DedicatedServer(p_293760_, levelstoragesource$levelstorageaccess, packrepository, worldstem, dedicatedserversettings, DataFixers.getDataFixer(), services, LoggerChunkProgressListener::createFromGameruleRadius);
+                        MinecraftServer.options = optionset; // CraftBukkit
+                        MinecraftServer.worldLoader = worldLoader.get(); // CraftBukkit
+                    }
                     dedicatedserver1.setPort(optionset.valueOf(optionspec11));
                     dedicatedserver1.setDemo(optionset.has(optionspec2));
                     dedicatedserver1.setId(optionset.valueOf(optionspec12));
                     boolean flag2 = !optionset.has(optionspec) && !optionset.valuesOf(optionspec15).contains("nogui");
-                    if (flag2 && !GraphicsEnvironment.isHeadless()) {
-                        dedicatedserver1.showGui();
+                    if (dedicatedserver1 instanceof DedicatedServer dedicatedServer && flag2 && !GraphicsEnvironment.isHeadless()) {
+                        dedicatedServer.showGui();
                     }
 
                     return dedicatedserver1;
@@ -272,7 +_,10 @@
             Thread thread = new Thread("Server Shutdown Thread") {
                 @Override
                 public void run() {
+                    // FORGE: Halting as GameTestServer will cause issues as it always calls System#exit on both crash and normal exit, so skip it
+                    if (!(dedicatedserver instanceof net.minecraft.gametest.framework.GameTestServer))
                     dedicatedserver.halt(true);
+                    org.apache.logging.log4j.LogManager.shutdown(); // we're manually managing the logging shutdown on the server. Make sure we do it here at the end.
                 }
             };
             thread.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(LOGGER));
