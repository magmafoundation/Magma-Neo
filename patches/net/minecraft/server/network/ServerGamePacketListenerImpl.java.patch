--- a/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -237,7 +_,7 @@
     private boolean waitingForSwitchToConfig;
 
     public ServerGamePacketListenerImpl(MinecraftServer p_9770_, Connection p_9771_, ServerPlayer p_9772_, CommonListenerCookie p_301978_) {
-        super(p_9770_, p_9771_, p_301978_);
+        super(p_9770_, p_9771_, p_301978_, p_9772_); // CraftBukkit
         this.chunkSender = new PlayerChunkSender(p_9771_.isMemoryConnection());
         this.player = p_9772_;
         p_9772_.connection = this;
@@ -246,6 +_,22 @@
         this.chatMessageChain = new FutureChain(p_9770_);
     }
 
+    // CraftBukkit start - add fields and methods
+    private int lastTick = MinecraftServer.currentTick;
+    private int allowedPlayerTicks = 1;
+    private int lastDropTick = MinecraftServer.currentTick;
+    private int lastBookTick  = MinecraftServer.currentTick;
+    private int dropCount = 0;
+
+    private boolean hasMoved = false;
+    private double lastPosX = Double.MAX_VALUE;
+    private double lastPosY = Double.MAX_VALUE;
+    private double lastPosZ = Double.MAX_VALUE;
+    private float lastPitch = Float.MAX_VALUE;
+    private float lastYaw = Float.MAX_VALUE;
+    private boolean justTeleported = false;
+    // CraftBukkit end
+
     @Override
     public void tick() {
         if (this.ackBlockChangesUpTo > -1) {
@@ -439,9 +_,11 @@
                 }
 
                 entity.absMoveTo(d3, d4, d5, f, f1);
+                resyncPlayerWithVehicle(entity); // Neo - Resync player position on vehicle moving
                 boolean flag3 = serverlevel.noCollision(entity, entity.getBoundingBox().deflate(0.0625));
                 if (flag && (flag2 || !flag3)) {
                     entity.absMoveTo(d0, d1, d2, f, f1);
+                    resyncPlayerWithVehicle(entity); // Neo - Resync player position on vehicle moving
                     this.send(new ClientboundMoveVehiclePacket(entity));
                     return;
                 }
@@ -462,6 +_,23 @@
         }
     }
 
+    private void resyncPlayerWithVehicle(Entity vehicle) {
+        Vec3 oldPos = this.player.position();
+        float yRot = this.player.getYRot();
+        float xRot = this.player.getXRot();
+        float yHeadRot = this.player.getYHeadRot();
+
+        vehicle.positionRider(this.player);
+
+        // preserve old rotation and store old position in xo/yo/zo
+        this.player.setYRot(yRot);
+        this.player.setXRot(xRot);
+        this.player.setYHeadRot(yHeadRot);
+        this.player.xo = oldPos.x;
+        this.player.yo = oldPos.y;
+        this.player.zo = oldPos.z;
+    }
+
     private boolean noBlocksAround(Entity p_9794_) {
         return p_9794_.level()
             .getBlockStates(p_9794_.getBoundingBox().inflate(0.0625).expandTowards(0.0, -0.55, 0.0))
@@ -927,7 +_,7 @@
                                     && !flag1
                                     && this.player.gameMode.getGameModeForPlayer() != GameType.SPECTATOR
                                     && !this.server.isFlightAllowed()
-                                    && !this.player.getAbilities().mayfly
+                                    && !this.player.mayFly()
                                     && !this.player.hasEffect(MobEffects.LEVITATION)
                                     && !flag
                                     && !flag3
@@ -999,11 +_,61 @@
         return false;
     }
 
+    // CraftBukkit start - Delegate to teleport(Location)
     public void teleport(double p_9775_, double p_9776_, double p_9777_, float p_9778_, float p_9779_) {
-        this.teleport(p_9775_, p_9776_, p_9777_, p_9778_, p_9779_, Collections.emptySet());
+        this.teleport(p_9775_, p_9776_, p_9777_, p_9778_, p_9779_, org.bukkit.event.player.PlayerTeleportEvent.TeleportCause.UNKNOWN);
+    }
+    public boolean teleport(double d0, double d1, double d2, float f, float f1, org.bukkit.event.player.PlayerTeleportEvent.TeleportCause cause) {
+        return this.teleport(d0, d1, d2, f, f1, Collections.emptySet(), cause);
     }
 
     public void teleport(double p_9781_, double p_9782_, double p_9783_, float p_9784_, float p_9785_, Set<RelativeMovement> p_9786_) {
+        this.teleport(p_9781_, p_9782_, p_9783_, p_9784_, p_9785_, p_9786_, org.bukkit.event.player.PlayerTeleportEvent.TeleportCause.UNKNOWN);
+    }
+
+    public boolean teleport(double d0, double d1, double d2, float f, float f1, Set<RelativeMovement> set, org.bukkit.event.player.PlayerTeleportEvent.TeleportCause cause) { // CraftBukkit - Return event status
+        org.bukkit.entity.Player player = this.getCraftPlayer();
+        org.bukkit.Location from = player.getLocation();
+        double x = d0;
+        double y = d1;
+        double z = d2;
+        float yaw = f;
+        float pitch = f1;
+        org.bukkit.Location to = new org.bukkit.Location(this.getCraftPlayer().getWorld(), x, y, z, yaw, pitch);
+        // SPIGOT-5171: Triggered on join
+        if (from.equals(to)) {
+            this.internalTeleport(d0, d1, d2, f, f1, set);
+            return true; // CraftBukkit - Return event status
+        }
+        org.bukkit.event.player.PlayerTeleportEvent event = new org.bukkit.event.player.PlayerTeleportEvent(player, from.clone(), to.clone(), cause);
+        this.cserver.getPluginManager().callEvent(event);
+        if (event.isCancelled() || !to.equals(event.getTo())) {
+            set.clear(); // Can't relative teleport
+            to = event.isCancelled() ? event.getFrom() : event.getTo();
+            d0 = to.getX();
+            d1 = to.getY();
+            d2 = to.getZ();
+            f = to.getYaw();
+            f1 = to.getPitch();
+        }
+        this.internalTeleport(d0, d1, d2, f, f1, set);
+        return !event.isCancelled(); // CraftBukkit - Return event status
+    }
+
+    public void teleport(org.bukkit.Location dest) {
+        internalTeleport(dest.getX(), dest.getY(), dest.getZ(), dest.getYaw(), dest.getPitch(), Collections.emptySet());
+    }
+
+    private void internalTeleport(double p_9781_, double p_9782_, double p_9783_, float p_9784_, float p_9785_, Set<RelativeMovement> p_9786_) {
+        // CraftBukkit start
+        if (Float.isNaN(p_9784_)) {
+            p_9784_ = 0;
+        }
+        if (Float.isNaN(p_9785_)) {
+            p_9785_ = 0;
+        }
+        this.justTeleported = true;
+        // CraftBukkit end
         double d0 = p_9786_.contains(RelativeMovement.X) ? this.player.getX() : 0.0;
         double d1 = p_9786_.contains(RelativeMovement.Y) ? this.player.getY() : 0.0;
         double d2 = p_9786_.contains(RelativeMovement.Z) ? this.player.getZ() : 0.0;
@@ -1014,6 +_,14 @@
             this.awaitingTeleport = 0;
         }
 
+        // CraftBukkit start - update last location
+        this.lastPosX = this.awaitingPositionFromClient.x;
+        this.lastPosY = this.awaitingPositionFromClient.y;
+        this.lastPosZ = this.awaitingPositionFromClient.z;
+        this.lastYaw = f;
+        this.lastPitch = f1;
+        // CraftBukkit end
+
         this.awaitingTeleportTime = this.tickCount;
         this.player.absMoveTo(p_9781_, p_9782_, p_9783_, p_9784_, p_9785_);
         this.player
@@ -1031,8 +_,10 @@
             case SWAP_ITEM_WITH_OFFHAND:
                 if (!this.player.isSpectator()) {
                     ItemStack itemstack = this.player.getItemInHand(InteractionHand.OFF_HAND);
-                    this.player.setItemInHand(InteractionHand.OFF_HAND, this.player.getItemInHand(InteractionHand.MAIN_HAND));
-                    this.player.setItemInHand(InteractionHand.MAIN_HAND, itemstack);
+                    var event = net.neoforged.neoforge.common.CommonHooks.onLivingSwapHandItems(this.player);
+                    if (event.isCanceled()) return;
+                    this.player.setItemInHand(InteractionHand.OFF_HAND, event.getItemSwappedToOffHand());
+                    this.player.setItemInHand(InteractionHand.MAIN_HAND, event.getItemSwappedToMainHand());
                     this.player.stopUsingItem();
                 }
 
@@ -1060,7 +_,7 @@
                     .handleBlockBreakAction(
                         blockpos, serverboundplayeractionpacket$action, p_9889_.getDirection(), this.player.level().getMaxBuildHeight(), p_9889_.getSequence()
                     );
-                this.player.connection.ackBlockChangesUpTo(p_9889_.getSequence());
+                this.player.connection.ackBlockChangesUpTo =p_9889_.getSequence();
                 return;
             default:
                 throw new IllegalArgumentException("Invalid player action");
@@ -1079,7 +_,7 @@
     @Override
     public void handleUseItemOn(ServerboundUseItemOnPacket p_9930_) {
         PacketUtils.ensureRunningOnSameThread(p_9930_, this, this.player.serverLevel());
-        this.player.connection.ackBlockChangesUpTo(p_9930_.getSequence());
+        this.player.connection.ackBlockChangesUpTo = p_9930_.getSequence();
         ServerLevel serverlevel = this.player.serverLevel();
         InteractionHand interactionhand = p_9930_.getHand();
         ItemStack itemstack = this.player.getItemInHand(interactionhand);
@@ -1231,8 +_,9 @@
                 }
 
                 CompletableFuture<FilteredText> completablefuture = this.filterTextPacket(playerchatmessage.signedContent());
-                Component component = this.server.getChatDecorator().decorate(this.player, playerchatmessage.decoratedContent());
+                Component component = net.neoforged.neoforge.common.CommonHooks.getServerChatSubmittedDecorator().decorate(this.player, playerchatmessage.decoratedContent());
                 this.chatMessageChain.append(completablefuture, p_300785_ -> {
+                    if (component == null) return; // Forge: ServerChatEvent was canceled if this is null.
                     PlayerChatMessage playerchatmessage1 = playerchatmessage.withUnsignedContent(component).filter(p_300785_.mask());
                     this.broadcastChatMessage(playerchatmessage1);
                 });
@@ -1381,6 +_,115 @@
         return false;
     }
 
+    // CraftBukkit start - add method
+    public void chat(String s, PlayerChatMessage original, boolean async) {
+        if (s.isEmpty() || this.player.getChatVisibility() == ChatVisiblity.HIDDEN) {
+            return;
+        }
+        net.minecraft.network.chat.OutgoingChatMessage outgoing = net.minecraft.network.chat.OutgoingChatMessage.create(original);
+
+        if (!async && s.startsWith("/")) {
+            this.handleCommand(s);
+        } else if (this.player.getChatVisibility() == ChatVisiblity.SYSTEM) {
+            // Do nothing, this is coming from a plugin
+        } else {
+            org.bukkit.entity.Player player = this.getCraftPlayer();
+            org.bukkit.event.player.AsyncPlayerChatEvent event = new org.bukkit.event.player.AsyncPlayerChatEvent(async, player, s, new org.bukkit.craftbukkit.util.LazyPlayerSet(server));
+            String originalFormat = event.getFormat(), originalMessage = event.getMessage();
+            this.cserver.getPluginManager().callEvent(event);
+
+            if (org.bukkit.event.player.PlayerChatEvent.getHandlerList().getRegisteredListeners().length != 0) {
+                // Evil plugins still listening to deprecated event
+                final org.bukkit.event.player.PlayerChatEvent queueEvent = new org.bukkit.event.player.PlayerChatEvent(player, event.getMessage(), event.getFormat(), event.getRecipients());
+                queueEvent.setCancelled(event.isCancelled());
+                org.bukkit.craftbukkit.util.Waitable waitable = new org.bukkit.craftbukkit.util.Waitable() {
+                    @Override
+                    protected Object evaluate() {
+                        org.bukkit.Bukkit.getPluginManager().callEvent(queueEvent);
+
+                        if (queueEvent.isCancelled()) {
+                            return null;
+                        }
+
+                        String message = String.format(queueEvent.getFormat(), queueEvent.getPlayer().getDisplayName(), queueEvent.getMessage());
+                        if (((org.bukkit.craftbukkit.util.LazyPlayerSet) queueEvent.getRecipients()).isLazy()) {
+                            if (originalFormat.equals(queueEvent.getFormat()) && originalMessage.equals(queueEvent.getMessage()) && queueEvent.getPlayer().getName().equalsIgnoreCase(queueEvent.getPlayer().getDisplayName())) {
+                                ServerGamePacketListenerImpl.this.server.getPlayerList().broadcastChatMessage(original, ServerGamePacketListenerImpl.this.player, ChatType.bind(ChatType.CHAT, (Entity) ServerGamePacketListenerImpl.this.player));
+                                return null;
+                            }
+
+                            for (ServerPlayer recipient : server.getPlayerList().players) {
+                                recipient.getBukkitEntity().sendMessage(ServerGamePacketListenerImpl.this.player.getUUID(), message);
+                            }
+                        } else {
+                            for (org.bukkit.entity.Player player : queueEvent.getRecipients()) {
+                                player.sendMessage(ServerGamePacketListenerImpl.this.player.getUUID(), message);
+                            }
+                        }
+                        ServerGamePacketListenerImpl.this.server.console.sendMessage(message);
+
+                        return null;
+                    }};
+                if (async) {
+                    server.processQueue.add(waitable);
+                } else {
+                    waitable.run();
+                }
+                try {
+                    waitable.get();
+                } catch (InterruptedException e) {
+                    Thread.currentThread().interrupt(); // This is proper habit for java. If we aren't handling it, pass it on!
+                } catch (java.util.concurrent.ExecutionException e) {
+                    throw new RuntimeException("Exception processing chat event", e.getCause());
+                }
+            } else {
+                if (event.isCancelled()) {
+                    return;
+                }
+
+                s = String.format(event.getFormat(), event.getPlayer().getDisplayName(), event.getMessage());
+                if (((org.bukkit.craftbukkit.util.LazyPlayerSet) event.getRecipients()).isLazy()) {
+                    if (originalFormat.equals(event.getFormat()) && originalMessage.equals(event.getMessage()) && event.getPlayer().getName().equalsIgnoreCase(event.getPlayer().getDisplayName())) {
+                        ServerGamePacketListenerImpl.this.server.getPlayerList().broadcastChatMessage(original, ServerGamePacketListenerImpl.this.player, ChatType.bind(ChatType.CHAT, (Entity) ServerGamePacketListenerImpl.this.player));
+                        return;
+                    }
+
+                    for (ServerPlayer recipient : server.getPlayerList().players) {
+                        recipient.getBukkitEntity().sendMessage(ServerGamePacketListenerImpl.this.player.getUUID(), s);
+                    }
+                } else {
+                    for (org.bukkit.entity.Player recipient : event.getRecipients()) {
+                        recipient.sendMessage(ServerGamePacketListenerImpl.this.player.getUUID(), s);
+                    }
+                }
+                server.console.sendMessage(s);
+            }
+        }
+    }
+    private void handleCommand(String s) {
+        this.LOGGER.info(this.player.getScoreboardName() + " issued server command: " + s);
+
+        org.bukkit.craftbukkit.entity.CraftPlayer player = this.getCraftPlayer();
+
+        org.bukkit.event.player.PlayerCommandPreprocessEvent event = new org.bukkit.event.player.PlayerCommandPreprocessEvent(player, s, new org.bukkit.craftbukkit.util.LazyPlayerSet(server));
+        this.cserver.getPluginManager().callEvent(event);
+
+        if (event.isCancelled()) {
+            return;
+        }
+
+        try {
+            if (this.cserver.dispatchCommand(event.getPlayer(), event.getMessage().substring(1))) {
+                return;
+            }
+        } catch (org.bukkit.command.CommandException ex) {
+            player.sendMessage(org.bukkit.ChatColor.RED + "An internal error occurred while attempting to perform this command");
+            java.util.logging.Logger.getLogger(ServerGamePacketListenerImpl.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
+            return;
+        }
+    }
+    // CraftBukkit end
+
     private PlayerChatMessage getSignedMessage(ServerboundChatPacket p_251061_, LastSeenMessages p_250566_) throws SignedMessageChain.DecodeException {
         SignedMessageBody signedmessagebody = new SignedMessageBody(p_251061_.message(), p_251061_.timeStamp(), p_251061_.salt(), p_250566_);
         return this.signedMessageDecoder.unpack(p_251061_.signature(), signedmessagebody);
@@ -1561,7 +_,11 @@
 
                         @Override
                         public void onInteraction(InteractionHand p_143682_, Vec3 p_143683_) {
-                            this.performInteraction(p_143682_, (p_143686_, p_143687_, p_143688_) -> p_143687_.interactAt(p_143686_, p_143683_, p_143688_));
+                            this.performInteraction(p_143682_, (p_143686_, p_143687_, p_143688_) -> {
+                                InteractionResult onInteractEntityAtResult = net.neoforged.neoforge.common.CommonHooks.onInteractEntityAt(player, entity, p_143683_, p_143682_);
+                                if (onInteractEntityAtResult != null) return onInteractEntityAtResult;
+                                return p_143687_.interactAt(p_143686_, p_143683_, p_143688_);
+                            });
                         }
 
                         @Override
@@ -1610,7 +_,7 @@
                     this.player = this.server.getPlayerList().respawn(this.player, false, Entity.RemovalReason.KILLED);
                     if (this.server.isHardcore()) {
                         this.player.setGameMode(GameType.SPECTATOR);
-                        this.player.level().getGameRules().getRule(GameRules.RULE_SPECTATORSGENERATECHUNKS).set(false, this.server);
+                        this.player.level().getGameRules().getRule(GameRules.RULE_SPECTATORSGENERATECHUNKS).set(false, this.server.overworld()); // CraftBukkit - per-world
                     }
                 }
                 break;
@@ -1753,7 +_,7 @@
     @Override
     public void handlePlayerAbilities(ServerboundPlayerAbilitiesPacket p_9887_) {
         PacketUtils.ensureRunningOnSameThread(p_9887_, this, this.player.serverLevel());
-        this.player.getAbilities().flying = p_9887_.isFlying() && this.player.getAbilities().mayfly;
+        this.player.getAbilities().flying = p_9887_.isFlying() && this.player.mayFly();
     }
 
     @Override
@@ -1812,7 +_,7 @@
             this.connection
                 .setupInboundProtocol(
                     ConfigurationProtocols.SERVERBOUND,
-                    new ServerConfigurationPacketListenerImpl(this.server, this.connection, this.createCookie(this.player.clientInformation()))
+                    new ServerConfigurationPacketListenerImpl(this.server, this.connection, this.createCookie(this.player.clientInformation(), this.connectionType), this.player) // CraftBukkit
                 );
         }
     }
@@ -1847,6 +_,7 @@
 
     @Override
     public void handleCustomPayload(ServerboundCustomPayloadPacket p_333887_) {
+        super.handleCustomPayload(p_333887_); // Neo: Call super to invoke modded payload handling.
     }
 
     @Override
