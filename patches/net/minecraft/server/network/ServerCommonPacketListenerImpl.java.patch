--- a/net/minecraft/server/network/ServerCommonPacketListenerImpl.java
+++ b/net/minecraft/server/network/ServerCommonPacketListenerImpl.java
@@ -26,7 +_,25 @@
 import net.minecraft.util.VisibleForDebug;
 import org.slf4j.Logger;
 
-public abstract class ServerCommonPacketListenerImpl implements ServerCommonPacketListener {
+// CraftBukkit start
+public abstract class ServerCommonPacketListenerImpl implements ServerCommonPacketListener, org.bukkit.craftbukkit.entity.CraftPlayer.TransferCookieConnection {
+
+    @Override
+    public boolean isTransferred() {
+        return this.transferred;
+    }
+
+    @Override
+    public net.minecraft.network.ConnectionProtocol getProtocol() {
+        return protocol();
+    }
+
+    @Override
+    public void sendPacket(Packet<?> packet) {
+        send(packet);
+    }
+    // CraftBukkit end
+
     private static final Logger LOGGER = LogUtils.getLogger();
     public static final int LATENCY_CHECK_INTERVAL = 15000;
     private static final int CLOSED_LISTENER_TIMEOUT = 15000;
@@ -42,13 +_,32 @@
     private boolean closed = false;
     private int latency;
     private volatile boolean suspendFlushingOnServerThread = false;
+    /**
+     * Holds the current connection type, based on the types of payloads that have been received so far.
+     */
+    protected net.neoforged.neoforge.network.connection.ConnectionType connectionType;
 
-    public ServerCommonPacketListenerImpl(MinecraftServer p_295057_, Connection p_294822_, CommonListenerCookie p_301980_) {
+    public ServerCommonPacketListenerImpl(MinecraftServer p_295057_, Connection p_294822_, CommonListenerCookie p_301980_, net.minecraft.server.level.ServerPlayer player) { // CraftBukkit
         this.server = p_295057_;
         this.connection = p_294822_;
         this.keepAliveTime = Util.getMillis();
         this.latency = p_301980_.latency();
         this.transferred = p_301980_.transferred();
+        // Neo: Set the connection type based on the cookie from the previous phase.
+        this.connectionType = p_301980_.connectionType();
+        // CraftBukkit start - add fields and methods
+        this.player = player;
+        this.player.transferCookieConnection = this;
+        this.cserver = p_295057_.server;
+    }
+
+    protected final net.minecraft.server.level.ServerPlayer player;
+    protected final org.bukkit.craftbukkit.CraftServer cserver;
+    public boolean processedDisconnect;
+
+    public org.bukkit.craftbukkit.entity.CraftPlayer getCraftPlayer() {
+        return (this.player == null) ? null : (org.bukkit.craftbukkit.entity.CraftPlayer) this.player.getBukkitEntity();
+        // CraftBukkit end
     }
 
     private void close() {
@@ -83,6 +_,22 @@
 
     @Override
     public void handleCustomPayload(ServerboundCustomPayloadPacket p_294276_) {
+        // Neo: Unconditionally handle register/unregister payloads.
+        if (p_294276_.payload() instanceof net.neoforged.neoforge.network.payload.MinecraftRegisterPayload minecraftRegisterPayload) {
+            net.neoforged.neoforge.network.registration.NetworkRegistry.onMinecraftRegister(this.getConnection(), minecraftRegisterPayload.newChannels());
+            return;
+        }
+
+        if (p_294276_.payload() instanceof net.neoforged.neoforge.network.payload.MinecraftUnregisterPayload minecraftUnregisterPayload) {
+            net.neoforged.neoforge.network.registration.NetworkRegistry.onMinecraftUnregister(this.getConnection(), minecraftUnregisterPayload.forgottenChannels());
+            return;
+        }
+
+        // Neo: Handle modded payloads. Vanilla payloads do not get sent to the modded handling pass. Additional payloads cannot be registered in the minecraft domain.
+        if (net.neoforged.neoforge.network.registration.NetworkRegistry.isModdedPayload(p_294276_.payload())) {
+            net.neoforged.neoforge.network.registration.NetworkRegistry.handleModdedPayload(this, p_294276_);
+            return;
+        }
     }
 
     @Override
@@ -141,7 +_,10 @@
         this.send(p_294278_, null);
     }
 
+    @Override
     public void send(Packet<?> p_295099_, @Nullable PacketSendListener p_296321_) {
+        net.neoforged.neoforge.network.registration.NetworkRegistry.checkPacket(p_295099_, this);
+
         if (p_295099_.isTerminal()) {
             this.close();
         }
@@ -183,7 +_,41 @@
         return this.latency;
     }
 
+    /**
+     * Creates a new cookie for this connection.
+     *
+     * @param p_301973_ The client information.
+     * @return The cookie.
+     * @deprecated Use {@link #createCookie(ClientInformation, net.neoforged.neoforge.network.connection.ConnectionType)} instead, keeping the connection type information available.
+     */
+    @Deprecated
     protected CommonListenerCookie createCookie(ClientInformation p_301973_) {
         return new CommonListenerCookie(this.playerProfile(), this.latency, p_301973_, this.transferred);
+    }
+
+    /**
+     * Creates a new cookie for this connection.
+     *
+     * @param p_301973_ The client information.
+     * @param connectionType Whether the connection is modded.
+     * @return The cookie.
+     */
+    protected CommonListenerCookie createCookie(ClientInformation p_301973_, net.neoforged.neoforge.network.connection.ConnectionType connectionType) {
+        return new CommonListenerCookie(this.playerProfile(), this.latency, p_301973_, this.transferred, connectionType);
+    }
+
+    @Override
+    public Connection getConnection() {
+        return connection;
+    }
+
+    @Override
+    public net.minecraft.util.thread.ReentrantBlockableEventLoop<?> getMainThreadEventLoop() {
+        return server;
+    }
+
+    @Override
+    public net.neoforged.neoforge.network.connection.ConnectionType getConnectionType() {
+        return connectionType;
     }
 }
