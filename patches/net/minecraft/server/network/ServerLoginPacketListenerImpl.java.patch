--- a/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
+++ b/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
@@ -44,7 +_,25 @@
 import org.apache.commons.lang3.Validate;
 import org.slf4j.Logger;
 
-public class ServerLoginPacketListenerImpl implements ServerLoginPacketListener, TickablePacketListener {
+// CraftBukkit start
+public class ServerLoginPacketListenerImpl implements ServerLoginPacketListener, TickablePacketListener, org.bukkit.craftbukkit.entity.CraftPlayer.TransferCookieConnection {
+
+    @Override
+    public boolean isTransferred() {
+        return this.transferred;
+    }
+
+    @Override
+    public net.minecraft.network.ConnectionProtocol getProtocol() {
+        return net.minecraft.network.ConnectionProtocol.LOGIN;
+    }
+
+    @Override
+    public void sendPacket(net.minecraft.network.protocol.Packet<?> packet) {
+        this.connection.send(packet);
+    }
+    // CraftBukkit end
+
     private static final AtomicInteger UNIQUE_THREAD_ID = new AtomicInteger(0);
     static final Logger LOGGER = LogUtils.getLogger();
     private static final int MAX_TICKS_BEFORE_LOGIN = 600;
@@ -59,6 +_,7 @@
     private GameProfile authenticatedProfile;
     private final String serverId = "";
     private final boolean transferred;
+    private net.minecraft.server.level.ServerPlayer player; // CraftBukkit
 
     public ServerLoginPacketListenerImpl(MinecraftServer p_10027_, Connection p_10028_, boolean p_320815_) {
         this.server = p_10027_;
@@ -73,6 +_,12 @@
             this.verifyLoginAndFinishConnectionSetup(Objects.requireNonNull(this.authenticatedProfile));
         }
 
+        // CraftBukkit start
+        if (this.state == ServerLoginPacketListenerImpl.State.WAITING_FOR_COOKIES && !this.player.getBukkitEntity().isAwaitingCookies()) {
+            this.postCookies(this.authenticatedProfile);
+        }
+        // CraftBukkit end
+
         if (this.state == ServerLoginPacketListenerImpl.State.WAITING_FOR_DUPE_DISCONNECT
             && !this.isPlayerAlreadyInWorld(Objects.requireNonNull(this.authenticatedProfile))) {
             this.finishLoginAndWaitForClient(this.authenticatedProfile);
@@ -112,6 +_,13 @@
         return this.requestedUsername != null ? this.requestedUsername + " (" + s + ")" : s;
     }
 
+    // CraftBukkit start
+    @Deprecated
+    public void disconnect(String s) {
+        disconnect(Component.literal(s));
+    }
+    // CraftBukkit end
+
     @Override
     public void handleHello(ServerboundHelloPacket p_10047_) {
         Validate.validState(this.state == ServerLoginPacketListenerImpl.State.HELLO, "Unexpected hello packet");
@@ -125,7 +_,24 @@
                 this.state = ServerLoginPacketListenerImpl.State.KEY;
                 this.connection.send(new ClientboundHelloPacket("", this.server.getKeyPair().getPublic().getEncoded(), this.challenge, true));
             } else {
-                this.startClientVerification(UUIDUtil.createOfflineProfile(this.requestedUsername));
+                // CraftBukkit start
+                Thread thread = new Thread("User Authenticator #" + ServerLoginPacketListenerImpl.UNIQUE_THREAD_ID.incrementAndGet()) {
+                    @Override
+                    public void run() {
+                        try {
+                            GameProfile gameprofile = UUIDUtil.createOfflineProfile(ServerLoginPacketListenerImpl.this.requestedUsername);
+                            ServerLoginPacketListenerImpl.this.callPlayerPreLoginEvents(gameprofile);
+                            ServerLoginPacketListenerImpl.LOGGER.info("UUID of player {} is {}", gameprofile.getName(), gameprofile.getId());
+                            ServerLoginPacketListenerImpl.this.startClientVerification(gameprofile);
+                        } catch (Exception ex) {
+                            disconnect("Failed to verify username!");
+                            server.server.getLogger().log(java.util.logging.Level.WARNING, "Exception verifying " + ServerLoginPacketListenerImpl.this.requestedUsername, ex);
+                        }
+                    }
+                };
+                thread.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(ServerLoginPacketListenerImpl.LOGGER));
+                thread.start();
+                // CraftBukkit end
             }
         }
     }
@@ -137,9 +_,21 @@
 
     private void verifyLoginAndFinishConnectionSetup(GameProfile p_294502_) {
         PlayerList playerlist = this.server.getPlayerList();
-        Component component = playerlist.canPlayerLogin(this.connection.getRemoteAddress(), p_294502_);
-        if (component != null) {
-            this.disconnect(component);
+        // CraftBukkit start - fire PlayerLoginEvent
+        this.player = playerlist.canPlayerLogin(this, p_294502_); // CraftBukkit
+        if (this.player != null) {
+            if (this.player.getBukkitEntity().isAwaitingCookies()) {
+                this.state = ServerLoginPacketListenerImpl.State.WAITING_FOR_COOKIES;
+            } else {
+                this.postCookies(p_294502_);
+            }
+        }
+    }
+
+    private void postCookies(GameProfile p_294502_) {
+        PlayerList playerlist = this.server.getPlayerList();
+        if (this.player == null) {
+            // CraftBukkit end
         } else {
             if (this.server.getCompressionThreshold() >= 0 && !this.connection.isMemoryConnection()) {
                 this.connection
@@ -149,7 +_,7 @@
                     );
             }
 
-            boolean flag = playerlist.disconnectAllPlayersWithProfile(p_294502_);
+            boolean flag = playerlist.disconnectAllPlayersWithProfile(p_294502_, this.player); // CraftBukkit - add player reference
             if (flag) {
                 this.state = ServerLoginPacketListenerImpl.State.WAITING_FOR_DUPE_DISCONNECT;
             } else {
@@ -193,6 +_,14 @@
                     ProfileResult profileresult = ServerLoginPacketListenerImpl.this.server.getSessionService().hasJoinedServer(s1, s, this.getAddress());
                     if (profileresult != null) {
                         GameProfile gameprofile = profileresult.profile();
+
+                        // CraftBukkit start - fire PlayerPreLoginEvent
+                        if (!connection.isConnected()) {
+                            return;
+                        }
+                        ServerLoginPacketListenerImpl.this.callPlayerPreLoginEvents(gameprofile);
+                        // CraftBukkit end
+
                         ServerLoginPacketListenerImpl.LOGGER.info("UUID of player {} is {}", gameprofile.getName(), gameprofile.getId());
                         ServerLoginPacketListenerImpl.this.startClientVerification(gameprofile);
                     } else if (ServerLoginPacketListenerImpl.this.server.isSingleplayer()) {
@@ -210,6 +_,11 @@
                         ServerLoginPacketListenerImpl.this.disconnect(Component.translatable("multiplayer.disconnect.authservers_down"));
                         ServerLoginPacketListenerImpl.LOGGER.error("Couldn't verify username because servers are unavailable");
                     }
+                    // CraftBukkit start - catch all exceptions
+                } catch (Exception exception) {
+                    disconnect("Failed to verify username!");
+                    server.server.getLogger().log(java.util.logging.Level.WARNING, "Exception verifying " + s1, exception);
+                    // CraftBukkit end
                 }
             }
 
@@ -225,6 +_,40 @@
         thread.start();
     }
 
+    // CraftBukkit start
+    private void callPlayerPreLoginEvents(GameProfile gameprofile) throws Exception {
+        String playerName = gameprofile.getName();
+        java.net.InetAddress address = ((java.net.InetSocketAddress) connection.getRemoteAddress()).getAddress();
+        java.util.UUID uniqueId = gameprofile.getId();
+        final org.bukkit.craftbukkit.CraftServer server = ServerLoginPacketListenerImpl.this.server.server;
+        org.bukkit.event.player.AsyncPlayerPreLoginEvent asyncEvent = new org.bukkit.event.player.AsyncPlayerPreLoginEvent(playerName, address, uniqueId, this.transferred);
+        server.getPluginManager().callEvent(asyncEvent);
+        if (org.bukkit.event.player.PlayerPreLoginEvent.getHandlerList().getRegisteredListeners().length != 0) {
+            final org.bukkit.event.player.PlayerPreLoginEvent event = new org.bukkit.event.player.PlayerPreLoginEvent(playerName, address, uniqueId);
+            if (asyncEvent.getResult() != org.bukkit.event.player.PlayerPreLoginEvent.Result.ALLOWED) {
+                event.disallow(asyncEvent.getResult(), asyncEvent.getKickMessage());
+            }
+            org.bukkit.craftbukkit.util.Waitable<org.bukkit.event.player.PlayerPreLoginEvent.Result> waitable = new org.bukkit.craftbukkit.util.Waitable<org.bukkit.event.player.PlayerPreLoginEvent.Result>() {
+                @Override
+                protected org.bukkit.event.player.PlayerPreLoginEvent.Result evaluate() {
+                    server.getPluginManager().callEvent(event);
+                    return event.getResult();
+                }
+            };
+            ServerLoginPacketListenerImpl.this.server.processQueue.add(waitable);
+            if (waitable.get() != org.bukkit.event.player.PlayerPreLoginEvent.Result.ALLOWED) {
+                disconnect(event.getKickMessage());
+                return;
+            }
+        } else {
+            if (asyncEvent.getLoginResult() != org.bukkit.event.player.AsyncPlayerPreLoginEvent.Result.ALLOWED) {
+                disconnect(asyncEvent.getKickMessage());
+                return;
+            }
+        }
+    }
+    // CraftBukkit end
+
     @Override
     public void handleCustomQueryPacket(ServerboundCustomQueryAnswerPacket p_295398_) {
         this.disconnect(ServerCommonPacketListenerImpl.DISCONNECT_UNEXPECTED_QUERY);
@@ -232,11 +_,12 @@
 
     @Override
     public void handleLoginAcknowledgement(ServerboundLoginAcknowledgedPacket p_295661_) {
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread(p_295661_, this, this.server); // CraftBukkit
         Validate.validState(this.state == ServerLoginPacketListenerImpl.State.PROTOCOL_SWITCHING, "Unexpected login acknowledgement packet");
         this.connection.setupOutboundProtocol(ConfigurationProtocols.CLIENTBOUND);
         CommonListenerCookie commonlistenercookie = CommonListenerCookie.createInitial(Objects.requireNonNull(this.authenticatedProfile), this.transferred);
         ServerConfigurationPacketListenerImpl serverconfigurationpacketlistenerimpl = new ServerConfigurationPacketListenerImpl(
-            this.server, this.connection, commonlistenercookie
+            this.server, this.connection, commonlistenercookie, this.player // CraftBukkit
         );
         this.connection.setupInboundProtocol(ConfigurationProtocols.SERVERBOUND, serverconfigurationpacketlistenerimpl);
         serverconfigurationpacketlistenerimpl.startConfiguration();
@@ -250,6 +_,12 @@
 
     @Override
     public void handleCookieResponse(ServerboundCookieResponsePacket p_320866_) {
+        // CraftBukkit start
+        net.minecraft.network.protocol.PacketUtils.ensureRunningOnSameThread(p_320866_, this, this.server);
+        if (this.player != null && this.player.getBukkitEntity().handleCookieResponse(p_320866_)) {
+            return;
+        }
+        // CraftBukkit end
         this.disconnect(ServerCommonPacketListenerImpl.DISCONNECT_UNEXPECTED_QUERY);
     }
 
@@ -259,6 +_,7 @@
         AUTHENTICATING,
         NEGOTIATING,
         VERIFYING,
+        WAITING_FOR_COOKIES,
         WAITING_FOR_DUPE_DISCONNECT,
         PROTOCOL_SWITCHING,
         ACCEPTED;
