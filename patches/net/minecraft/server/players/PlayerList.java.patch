--- a/net/minecraft/server/players/PlayerList.java
+++ b/net/minecraft/server/players/PlayerList.java
@@ -128,8 +_,16 @@
     private boolean allowCommandsForAllPlayers;
     private static final boolean ALLOW_LOGOUTIVATOR = false;
     private int sendAllPlayerInfoIn;
+    private final List<ServerPlayer> playersView = java.util.Collections.unmodifiableList(players);
+
+    // CraftBukkit start
+    private org.bukkit.craftbukkit.CraftServer cserver;
 
     public PlayerList(MinecraftServer p_203842_, LayeredRegistryAccess<RegistryLayer> p_251844_, PlayerDataStorage p_203844_, int p_203845_) {
+        this.cserver = p_203842_.server = new org.bukkit.craftbukkit.CraftServer((net.minecraft.server.dedicated.DedicatedServer) p_203842_, this);
+        p_203842_.console = org.bukkit.craftbukkit.command.ColouredConsoleSender.getInstance();
+        p_203842_.reader.addCompleter(new org.bukkit.craftbukkit.command.ConsoleCommandCompleter(p_203842_.server));
+        // CraftBukkit end
         this.server = p_203842_;
         this.registries = p_251844_;
         this.maxPlayers = p_203845_;
@@ -177,7 +_,7 @@
         p_11263_.loadGameTypes(optional1.orElse(null));
         ServerGamePacketListenerImpl servergamepacketlistenerimpl = new ServerGamePacketListenerImpl(this.server, p_11262_, p_11263_, p_301988_);
         p_11262_.setupInboundProtocol(
-            GameProtocols.SERVERBOUND_TEMPLATE.bind(RegistryFriendlyByteBuf.decorator(this.server.registryAccess())), servergamepacketlistenerimpl
+            GameProtocols.SERVERBOUND_TEMPLATE.bind(RegistryFriendlyByteBuf.decorator(this.server.registryAccess(), servergamepacketlistenerimpl.getConnectionType())), servergamepacketlistenerimpl
         );
         GameRules gamerules = serverlevel1.getGameRules();
         boolean flag = gamerules.getBoolean(GameRules.RULE_DO_IMMEDIATE_RESPAWN);
@@ -201,6 +_,7 @@
         servergamepacketlistenerimpl.send(new ClientboundChangeDifficultyPacket(leveldata.getDifficulty(), leveldata.isDifficultyLocked()));
         servergamepacketlistenerimpl.send(new ClientboundPlayerAbilitiesPacket(p_11263_.getAbilities()));
         servergamepacketlistenerimpl.send(new ClientboundSetCarriedItemPacket(p_11263_.getInventory().selected));
+        net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.event.OnDatapackSyncEvent(this, p_11263_));
         servergamepacketlistenerimpl.send(new ClientboundUpdateRecipesPacket(this.server.getRecipeManager().getOrderedRecipes()));
         this.sendPlayerPermissionLevel(p_11263_);
         p_11263_.getStats().markAllDirty();
@@ -265,6 +_,7 @@
         }
 
         p_11263_.initInventoryMenu();
+        net.neoforged.neoforge.event.EventHooks.firePlayerLoggedIn( p_11263_ );
     }
 
     public void updateEntireScoreboard(ServerScoreboard p_11274_, ServerPlayer p_11275_) {
@@ -330,6 +_,7 @@
             optional = Optional.of(compoundtag);
             p_11225_.load(compoundtag);
             LOGGER.debug("loading single player");
+            net.neoforged.neoforge.event.EventHooks.firePlayerLoadingEvent(p_11225_, this.playerIo, p_11225_.getUUID().toString());
         } else {
             optional = this.playerIo.load(p_11225_);
         }
@@ -338,6 +_,7 @@
     }
 
     protected void save(ServerPlayer p_11277_) {
+        if (p_11277_.connection == null) return;
         this.playerIo.save(p_11277_);
         ServerStatsCounter serverstatscounter = this.stats.get(p_11277_.getUUID());
         if (serverstatscounter != null) {
@@ -351,6 +_,7 @@
     }
 
     public void remove(ServerPlayer p_11287_) {
+        net.neoforged.neoforge.event.EventHooks.firePlayerLoggedOut(p_11287_);
         ServerLevel serverlevel = p_11287_.serverLevel();
         p_11287_.awardStat(Stats.LEAVE_GAME);
         this.save(p_11287_);
@@ -379,8 +_,39 @@
         this.broadcastAll(new ClientboundPlayerInfoRemovePacket(List.of(p_11287_.getUUID())));
     }
 
-    @Nullable
-    public Component canPlayerLogin(SocketAddress p_11257_, GameProfile p_11258_) {
+    // CraftBukkit start - Whole method, SocketAddress to LoginListener, added hostname to signature, return EntityPlayer
+    public ServerPlayer canPlayerLogin(net.minecraft.server.network.ServerLoginPacketListenerImpl loginlistener, GameProfile p_11258_) {
+        // Moved from processLogin
+        UUID uuid = p_11258_.getId();
+        List<ServerPlayer> list = Lists.newArrayList();
+
+        ServerPlayer entityplayer;
+
+        for (int i = 0; i < this.players.size(); ++i) {
+            entityplayer = (ServerPlayer) this.players.get(i);
+            if (entityplayer.getUUID().equals(uuid)) {
+                list.add(entityplayer);
+            }
+        }
+
+        java.util.Iterator iterator = list.iterator();
+
+        while (iterator.hasNext()) {
+            entityplayer = (ServerPlayer) iterator.next();
+            save(entityplayer); // CraftBukkit - Force the player's inventory to be saved
+            entityplayer.connection.disconnect(Component.translatable("multiplayer.disconnect.duplicate_login"));
+        }
+
+        // Instead of kicking then returning, we need to store the kick reason
+        // in the event, check with plugins to see if it's ok, and THEN kick
+        // depending on the outcome.
+        SocketAddress p_11257_ = loginlistener.connection.getRemoteAddress();
+
+        ServerPlayer entity = new ServerPlayer(this.server, this.server.getLevel(Level.OVERWORLD), p_11258_, ClientInformation.createDefault());
+        entity.transferCookieConnection = loginlistener;
+        org.bukkit.entity.Player player = entity.getBukkitEntity();
+        org.bukkit.event.player.PlayerLoginEvent event = new org.bukkit.event.player.PlayerLoginEvent(player, loginlistener.connection.hostname, ((java.net.InetSocketAddress) p_11257_).getAddress());
+
         if (this.bans.isBanned(p_11258_)) {
             UserBanListEntry userbanlistentry = this.bans.get(p_11258_);
             MutableComponent mutablecomponent1 = Component.translatable("multiplayer.disconnect.banned.reason", userbanlistentry.getReason());
@@ -390,9 +_,10 @@
                 );
             }
 
-            return mutablecomponent1;
+            event.disallow(org.bukkit.event.player.PlayerLoginEvent.Result.KICK_BANNED, org.bukkit.craftbukkit.util.CraftChatMessage.fromComponent(mutablecomponent1));
         } else if (!this.isWhiteListed(p_11258_)) {
-            return Component.translatable("multiplayer.disconnect.not_whitelisted");
+            MutableComponent ichatmutablecomponent = Component.translatable("multiplayer.disconnect.not_whitelisted");
+            event.disallow(org.bukkit.event.player.PlayerLoginEvent.Result.KICK_WHITELIST, org.bukkit.craftbukkit.util.CraftChatMessage.fromComponent(ichatmutablecomponent));
         } else if (this.ipBans.isBanned(p_11257_)) {
             IpBanListEntry ipbanlistentry = this.ipBans.get(p_11257_);
             MutableComponent mutablecomponent = Component.translatable("multiplayer.disconnect.banned_ip.reason", ipbanlistentry.getReason());
@@ -402,19 +_,30 @@
                 );
             }
 
-            return mutablecomponent;
+            event.disallow(org.bukkit.event.player.PlayerLoginEvent.Result.KICK_BANNED, org.bukkit.craftbukkit.util.CraftChatMessage.fromComponent(mutablecomponent));
         } else {
-            return this.players.size() >= this.maxPlayers && !this.canBypassPlayerLimit(p_11258_)
-                ? Component.translatable("multiplayer.disconnect.server_full")
-                : null;
-        }
-    }
-
-    public ServerPlayer getPlayerForLogin(GameProfile p_215625_, ClientInformation p_302018_) {
-        return new ServerPlayer(this.server, this.server.overworld(), p_215625_, p_302018_);
-    }
-
-    public boolean disconnectAllPlayersWithProfile(GameProfile p_295670_) {
+            if (this.players.size() >= this.maxPlayers && !this.canBypassPlayerLimit(p_11258_)) {
+                event.disallow(org.bukkit.event.player.PlayerLoginEvent.Result.KICK_FULL, "The server is full");
+            }
+        }
+
+        cserver.getPluginManager().callEvent(event);
+        if (event.getResult() != org.bukkit.event.player.PlayerLoginEvent.Result.ALLOWED) {
+            loginlistener.disconnect(event.getKickMessage());
+            return null;
+        }
+        return entity;
+    }
+
+    // CraftBukkit start - added ServerPlayer
+    public ServerPlayer getPlayerForLogin(GameProfile p_215625_, ClientInformation p_302018_, ServerPlayer player) {
+        player.updateOptions(p_302018_);
+        return player;
+        // CraftBukkit end
+    }
+
+    public boolean disconnectAllPlayersWithProfile(GameProfile p_295670_, ServerPlayer player) { // CraftBukkit - added EntityPlayer
+      /* CraftBukkit startMoved up
         UUID uuid = p_295670_.getId();
         Set<ServerPlayer> set = Sets.newIdentityHashSet();
 
@@ -434,19 +_,38 @@
         }
 
         return !set.isEmpty();
+        */
+        return player == null;
+        // CraftBukkit end
     }
 
+    // CraftBukkit start
     public ServerPlayer respawn(ServerPlayer p_11237_, boolean p_11238_, Entity.RemovalReason p_348558_) {
+        return this.respawn(p_11237_, p_11238_, p_348558_, null, null);
+    }
+
+    public ServerPlayer respawn(ServerPlayer p_11237_, boolean p_11238_, Entity.RemovalReason p_348558_, org.bukkit.event.player.PlayerRespawnEvent.RespawnReason reason) {
+        return this.respawn(p_11237_, p_11238_, p_348558_, reason, null);
+    }
+
+    public ServerPlayer respawn(ServerPlayer p_11237_, boolean p_11238_, Entity.RemovalReason p_348558_, org.bukkit.event.player.PlayerRespawnEvent.RespawnReason reason, org.bukkit.Location location) {
         this.players.remove(p_11237_);
         p_11237_.serverLevel().removePlayerImmediately(p_11237_, p_348558_);
         DimensionTransition dimensiontransition = p_11237_.findRespawnPositionAndUseSpawnBlock(p_11238_, DimensionTransition.DO_NOTHING);
+
+        // Neo: Allow changing the respawn position of players. The local dimension transition is updated with the new target.
+        var event = net.neoforged.neoforge.event.EventHooks.firePlayerRespawnPositionEvent(p_11237_, dimensiontransition, p_11238_);
+        dimensiontransition = event.getDimensionTransition();
+
         ServerLevel serverlevel = dimensiontransition.newLevel();
         ServerPlayer serverplayer = new ServerPlayer(this.server, serverlevel, p_11237_.getGameProfile(), p_11237_.clientInformation());
         serverplayer.connection = p_11237_.connection;
         serverplayer.restoreFrom(p_11237_, p_11238_);
         serverplayer.setId(p_11237_.getId());
         serverplayer.setMainArm(p_11237_.getMainArm());
-        if (!dimensiontransition.missingRespawnBlock()) {
+
+        // Neo: Allow the event to control if the original spawn position is copied
+        if (event.copyOriginalSpawnPosition()) {
             serverplayer.copyRespawnPosition(p_11237_);
         }
 
@@ -477,6 +_,7 @@
         this.playersByUUID.put(serverplayer.getUUID(), serverplayer);
         serverplayer.initInventoryMenu();
         serverplayer.setHealth(serverplayer.getHealth());
+        net.neoforged.neoforge.event.EventHooks.firePlayerRespawnEvent(serverplayer, p_11238_);
         if (!p_11238_) {
             BlockPos blockpos = BlockPos.containing(dimensiontransition.pos());
             BlockState blockstate = serverlevel.getBlockState(blockpos);
@@ -529,6 +_,24 @@
         }
     }
 
+    // CraftBukkit start - add a world/entity limited version
+    public void broadcastAll(Packet packet, Player entityhuman) {
+        for (int i = 0; i < this.players.size(); ++i) {
+            ServerPlayer entityplayer =  this.players.get(i);
+            if (entityhuman != null && !entityplayer.getBukkitEntity().canSee(entityhuman.getBukkitEntity())) {
+                continue;
+            }
+            ((ServerPlayer) this.players.get(i)).connection.send(packet);
+        }
+    }
+
+    public void broadcastAll(Packet packet, Level world) {
+        for (int i = 0; i < world.players().size(); ++i) {
+            ((ServerPlayer) world.players().get(i)).connection.send(packet);
+        }
+    }
+    // CraftBukkit end
+
     public void broadcastAll(Packet<?> p_11271_, ResourceKey<Level> p_11272_) {
         for (ServerPlayer serverplayer : this.players) {
             if (serverplayer.level().dimension() == p_11272_) {
@@ -582,6 +_,7 @@
     }
 
     public void op(GameProfile p_11254_) {
+        if (net.neoforged.neoforge.event.EventHooks.onPermissionChanged(p_11254_, this.server.getOperatorUserPermissionLevel(), this)) return;
         this.ops.add(new ServerOpListEntry(p_11254_, this.server.getOperatorUserPermissionLevel(), this.ops.canBypassPlayerLimit(p_11254_)));
         ServerPlayer serverplayer = this.getPlayer(p_11254_.getId());
         if (serverplayer != null) {
@@ -590,6 +_,7 @@
     }
 
     public void deop(GameProfile p_11281_) {
+        if (net.neoforged.neoforge.event.EventHooks.onPermissionChanged(p_11281_, 0, this)) return;
         this.ops.remove(p_11281_);
         ServerPlayer serverplayer = this.getPlayer(p_11281_.getId());
         if (serverplayer != null) {
@@ -802,22 +_,22 @@
         return p_251384_.hasSignature() && !p_251384_.hasExpiredServer(Instant.now());
     }
 
-    public ServerStatsCounter getPlayerStats(Player p_11240_) {
-        UUID uuid = p_11240_.getUUID();
-        ServerStatsCounter serverstatscounter = this.stats.get(uuid);
+    // CraftBukkit start
+    public ServerStatsCounter getPlayerStats(ServerPlayer p_11240_) {
+        ServerStatsCounter serverstatisticmanager = p_11240_.getStats();
+        return serverstatisticmanager == null ? getPlayerStats(p_11240_.getUUID(), p_11240_.getDisplayName().getString()) : serverstatisticmanager;
+    }
+
+    public ServerStatsCounter getPlayerStats(UUID uuid, String displayName) {
+        ServerPlayer entityhuman = this.getPlayer(uuid);
+        ServerStatsCounter serverstatscounter = entityhuman == null ? null : (ServerStatsCounter) entityhuman.getStats();
+        // CraftBukkit end
         if (serverstatscounter == null) {
             File file1 = this.server.getWorldPath(LevelResource.PLAYER_STATS_DIR).toFile();
-            File file2 = new File(file1, uuid + ".json");
-            if (!file2.exists()) {
-                File file3 = new File(file1, p_11240_.getName().getString() + ".json");
-                Path path = file3.toPath();
-                if (FileUtil.isPathNormalized(path) && FileUtil.isPathPortable(path) && path.startsWith(file1.getPath()) && file3.isFile()) {
-                    file3.renameTo(file2);
-                }
-            }
+            File file2 = new File(file1, displayName + ".json"); // CraftBukkit
 
             serverstatscounter = new ServerStatsCounter(this.server, file2);
-            this.stats.put(uuid, serverstatscounter);
+            // this.stats.put(uuid, serverstatscounter);  // CraftBukkit
         }
 
         return serverstatscounter;
@@ -832,6 +_,8 @@
             this.advancements.put(uuid, playeradvancements);
         }
 
+        // Forge: don't overwrite active player with a fake one.
+        if (!(p_11297_ instanceof net.neoforged.neoforge.common.util.FakePlayer))
         playeradvancements.setPlayer(p_11297_);
         return playeradvancements;
     }
@@ -859,7 +_,7 @@
     }
 
     public List<ServerPlayer> getPlayers() {
-        return this.players;
+        return this.playersView; //Unmodifiable view, we don't want people removing things without us knowing.
     }
 
     @Nullable
@@ -876,6 +_,7 @@
             playeradvancements.reload(this.server.getAdvancements());
         }
 
+        net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.event.OnDatapackSyncEvent(this, null));
         this.broadcastAll(new ClientboundUpdateTagsPacket(TagNetworkSerialization.serializeTagsToNetwork(this.registries)));
         ClientboundUpdateRecipesPacket clientboundupdaterecipespacket = new ClientboundUpdateRecipesPacket(this.server.getRecipeManager().getOrderedRecipes());
 
